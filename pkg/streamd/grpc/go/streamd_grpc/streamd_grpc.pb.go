// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: streamd.proto

package streamd_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamDClient is the client API for StreamD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDClient interface {
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigReply, error)
	SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigReply, error)
	ResetCache(ctx context.Context, in *ResetCacheRequest, opts ...grpc.CallOption) (*ResetCacheReply, error)
	InitCache(ctx context.Context, in *InitCacheRequest, opts ...grpc.CallOption) (*InitCacheReply, error)
	StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamReply, error)
	EndStream(ctx context.Context, in *EndStreamRequest, opts ...grpc.CallOption) (*EndStreamReply, error)
	GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusReply, error)
	IsBackendEnabled(ctx context.Context, in *IsBackendEnabledRequest, opts ...grpc.CallOption) (*IsBackendEnabledReply, error)
	GetBackendInfo(ctx context.Context, in *GetBackendInfoRequest, opts ...grpc.CallOption) (*GetBackendInfoReply, error)
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error)
	SetTitle(ctx context.Context, in *SetTitleRequest, opts ...grpc.CallOption) (*SetTitleReply, error)
	SetDescription(ctx context.Context, in *SetDescriptionRequest, opts ...grpc.CallOption) (*SetDescriptionReply, error)
	SetApplyProfile(ctx context.Context, in *SetApplyProfileRequest, opts ...grpc.CallOption) (*SetApplyProfileReply, error)
	UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamReply, error)
	GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableReply, error)
	GetVariableHash(ctx context.Context, in *GetVariableHashRequest, opts ...grpc.CallOption) (*GetVariableHashReply, error)
	SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*SetVariableReply, error)
	EXPERIMENTAL_ReinitStreamControllers(ctx context.Context, in *EXPERIMENTAL_ReinitStreamControllersRequest, opts ...grpc.CallOption) (*EXPERIMENTAL_ReinitStreamControllersReply, error)
	OBSOLETE_FetchConfig(ctx context.Context, in *OBSOLETE_FetchConfigRequest, opts ...grpc.CallOption) (*OBSOLETE_FetchConfigReply, error)
	OBSOLETE_GitInfo(ctx context.Context, in *OBSOLETE_GetGitInfoRequest, opts ...grpc.CallOption) (*OBSOLETE_GetGitInfoReply, error)
	OBSOLETE_GitRelogin(ctx context.Context, in *OBSOLETE_GitReloginRequest, opts ...grpc.CallOption) (*OBSOLETE_GitReloginReply, error)
	SubscribeToOAuthRequests(ctx context.Context, in *SubscribeToOAuthRequestsRequest, opts ...grpc.CallOption) (StreamD_SubscribeToOAuthRequestsClient, error)
	SubmitOAuthCode(ctx context.Context, in *SubmitOAuthCodeRequest, opts ...grpc.CallOption) (*SubmitOAuthCodeReply, error)
	OBSGetSceneList(ctx context.Context, in *OBSGetSceneListRequest, opts ...grpc.CallOption) (*OBSGetSceneListReply, error)
	OBSSetCurrentProgramScene(ctx context.Context, in *OBSSetCurrentProgramSceneRequest, opts ...grpc.CallOption) (*OBSSetCurrentProgramSceneReply, error)
	ListStreamServers(ctx context.Context, in *ListStreamServersRequest, opts ...grpc.CallOption) (*ListStreamServersReply, error)
	StartStreamServer(ctx context.Context, in *StartStreamServerRequest, opts ...grpc.CallOption) (*StartStreamServerReply, error)
	StopStreamServer(ctx context.Context, in *StopStreamServerRequest, opts ...grpc.CallOption) (*StopStreamServerReply, error)
	ListStreamDestinations(ctx context.Context, in *ListStreamDestinationsRequest, opts ...grpc.CallOption) (*ListStreamDestinationsReply, error)
	AddStreamDestination(ctx context.Context, in *AddStreamDestinationRequest, opts ...grpc.CallOption) (*AddStreamDestinationReply, error)
	RemoveStreamDestination(ctx context.Context, in *RemoveStreamDestinationRequest, opts ...grpc.CallOption) (*RemoveStreamDestinationReply, error)
	AddIncomingStream(ctx context.Context, in *AddIncomingStreamRequest, opts ...grpc.CallOption) (*AddIncomingStreamReply, error)
	RemoveIncomingStream(ctx context.Context, in *RemoveIncomingStreamRequest, opts ...grpc.CallOption) (*RemoveIncomingStreamReply, error)
	ListIncomingStreams(ctx context.Context, in *ListIncomingStreamsRequest, opts ...grpc.CallOption) (*ListIncomingStreamsReply, error)
	ListStreamForwards(ctx context.Context, in *ListStreamForwardsRequest, opts ...grpc.CallOption) (*ListStreamForwardsReply, error)
	AddStreamForward(ctx context.Context, in *AddStreamForwardRequest, opts ...grpc.CallOption) (*AddStreamForwardReply, error)
	UpdateStreamForward(ctx context.Context, in *UpdateStreamForwardRequest, opts ...grpc.CallOption) (*UpdateStreamForwardReply, error)
	RemoveStreamForward(ctx context.Context, in *RemoveStreamForwardRequest, opts ...grpc.CallOption) (*RemoveStreamForwardReply, error)
}

type streamDClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamDClient(cc grpc.ClientConnInterface) StreamDClient {
	return &streamDClient{cc}
}

func (c *streamDClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error) {
	out := new(GetConfigReply)
	err := c.cc.Invoke(ctx, "/StreamD/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigReply, error) {
	out := new(SetConfigReply)
	err := c.cc.Invoke(ctx, "/StreamD/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigReply, error) {
	out := new(SaveConfigReply)
	err := c.cc.Invoke(ctx, "/StreamD/SaveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ResetCache(ctx context.Context, in *ResetCacheRequest, opts ...grpc.CallOption) (*ResetCacheReply, error) {
	out := new(ResetCacheReply)
	err := c.cc.Invoke(ctx, "/StreamD/ResetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) InitCache(ctx context.Context, in *InitCacheRequest, opts ...grpc.CallOption) (*InitCacheReply, error) {
	out := new(InitCacheReply)
	err := c.cc.Invoke(ctx, "/StreamD/InitCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamReply, error) {
	out := new(StartStreamReply)
	err := c.cc.Invoke(ctx, "/StreamD/StartStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) EndStream(ctx context.Context, in *EndStreamRequest, opts ...grpc.CallOption) (*EndStreamReply, error) {
	out := new(EndStreamReply)
	err := c.cc.Invoke(ctx, "/StreamD/EndStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusReply, error) {
	out := new(GetStreamStatusReply)
	err := c.cc.Invoke(ctx, "/StreamD/GetStreamStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) IsBackendEnabled(ctx context.Context, in *IsBackendEnabledRequest, opts ...grpc.CallOption) (*IsBackendEnabledReply, error) {
	out := new(IsBackendEnabledReply)
	err := c.cc.Invoke(ctx, "/StreamD/IsBackendEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetBackendInfo(ctx context.Context, in *GetBackendInfoRequest, opts ...grpc.CallOption) (*GetBackendInfoReply, error) {
	out := new(GetBackendInfoReply)
	err := c.cc.Invoke(ctx, "/StreamD/GetBackendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error) {
	out := new(RestartReply)
	err := c.cc.Invoke(ctx, "/StreamD/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetTitle(ctx context.Context, in *SetTitleRequest, opts ...grpc.CallOption) (*SetTitleReply, error) {
	out := new(SetTitleReply)
	err := c.cc.Invoke(ctx, "/StreamD/SetTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetDescription(ctx context.Context, in *SetDescriptionRequest, opts ...grpc.CallOption) (*SetDescriptionReply, error) {
	out := new(SetDescriptionReply)
	err := c.cc.Invoke(ctx, "/StreamD/SetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetApplyProfile(ctx context.Context, in *SetApplyProfileRequest, opts ...grpc.CallOption) (*SetApplyProfileReply, error) {
	out := new(SetApplyProfileReply)
	err := c.cc.Invoke(ctx, "/StreamD/SetApplyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamReply, error) {
	out := new(UpdateStreamReply)
	err := c.cc.Invoke(ctx, "/StreamD/UpdateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableReply, error) {
	out := new(GetVariableReply)
	err := c.cc.Invoke(ctx, "/StreamD/GetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetVariableHash(ctx context.Context, in *GetVariableHashRequest, opts ...grpc.CallOption) (*GetVariableHashReply, error) {
	out := new(GetVariableHashReply)
	err := c.cc.Invoke(ctx, "/StreamD/GetVariableHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*SetVariableReply, error) {
	out := new(SetVariableReply)
	err := c.cc.Invoke(ctx, "/StreamD/SetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) EXPERIMENTAL_ReinitStreamControllers(ctx context.Context, in *EXPERIMENTAL_ReinitStreamControllersRequest, opts ...grpc.CallOption) (*EXPERIMENTAL_ReinitStreamControllersReply, error) {
	out := new(EXPERIMENTAL_ReinitStreamControllersReply)
	err := c.cc.Invoke(ctx, "/StreamD/EXPERIMENTAL_ReinitStreamControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) OBSOLETE_FetchConfig(ctx context.Context, in *OBSOLETE_FetchConfigRequest, opts ...grpc.CallOption) (*OBSOLETE_FetchConfigReply, error) {
	out := new(OBSOLETE_FetchConfigReply)
	err := c.cc.Invoke(ctx, "/StreamD/OBSOLETE_FetchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) OBSOLETE_GitInfo(ctx context.Context, in *OBSOLETE_GetGitInfoRequest, opts ...grpc.CallOption) (*OBSOLETE_GetGitInfoReply, error) {
	out := new(OBSOLETE_GetGitInfoReply)
	err := c.cc.Invoke(ctx, "/StreamD/OBSOLETE_GitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) OBSOLETE_GitRelogin(ctx context.Context, in *OBSOLETE_GitReloginRequest, opts ...grpc.CallOption) (*OBSOLETE_GitReloginReply, error) {
	out := new(OBSOLETE_GitReloginReply)
	err := c.cc.Invoke(ctx, "/StreamD/OBSOLETE_GitRelogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToOAuthRequests(ctx context.Context, in *SubscribeToOAuthRequestsRequest, opts ...grpc.CallOption) (StreamD_SubscribeToOAuthRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[0], "/StreamD/SubscribeToOAuthRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToOAuthRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToOAuthRequestsClient interface {
	Recv() (*OAuthRequest, error)
	grpc.ClientStream
}

type streamDSubscribeToOAuthRequestsClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToOAuthRequestsClient) Recv() (*OAuthRequest, error) {
	m := new(OAuthRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) SubmitOAuthCode(ctx context.Context, in *SubmitOAuthCodeRequest, opts ...grpc.CallOption) (*SubmitOAuthCodeReply, error) {
	out := new(SubmitOAuthCodeReply)
	err := c.cc.Invoke(ctx, "/StreamD/SubmitOAuthCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) OBSGetSceneList(ctx context.Context, in *OBSGetSceneListRequest, opts ...grpc.CallOption) (*OBSGetSceneListReply, error) {
	out := new(OBSGetSceneListReply)
	err := c.cc.Invoke(ctx, "/StreamD/OBSGetSceneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) OBSSetCurrentProgramScene(ctx context.Context, in *OBSSetCurrentProgramSceneRequest, opts ...grpc.CallOption) (*OBSSetCurrentProgramSceneReply, error) {
	out := new(OBSSetCurrentProgramSceneReply)
	err := c.cc.Invoke(ctx, "/StreamD/OBSSetCurrentProgramScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListStreamServers(ctx context.Context, in *ListStreamServersRequest, opts ...grpc.CallOption) (*ListStreamServersReply, error) {
	out := new(ListStreamServersReply)
	err := c.cc.Invoke(ctx, "/StreamD/ListStreamServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StartStreamServer(ctx context.Context, in *StartStreamServerRequest, opts ...grpc.CallOption) (*StartStreamServerReply, error) {
	out := new(StartStreamServerReply)
	err := c.cc.Invoke(ctx, "/StreamD/StartStreamServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StopStreamServer(ctx context.Context, in *StopStreamServerRequest, opts ...grpc.CallOption) (*StopStreamServerReply, error) {
	out := new(StopStreamServerReply)
	err := c.cc.Invoke(ctx, "/StreamD/StopStreamServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListStreamDestinations(ctx context.Context, in *ListStreamDestinationsRequest, opts ...grpc.CallOption) (*ListStreamDestinationsReply, error) {
	out := new(ListStreamDestinationsReply)
	err := c.cc.Invoke(ctx, "/StreamD/ListStreamDestinations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) AddStreamDestination(ctx context.Context, in *AddStreamDestinationRequest, opts ...grpc.CallOption) (*AddStreamDestinationReply, error) {
	out := new(AddStreamDestinationReply)
	err := c.cc.Invoke(ctx, "/StreamD/AddStreamDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveStreamDestination(ctx context.Context, in *RemoveStreamDestinationRequest, opts ...grpc.CallOption) (*RemoveStreamDestinationReply, error) {
	out := new(RemoveStreamDestinationReply)
	err := c.cc.Invoke(ctx, "/StreamD/RemoveStreamDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) AddIncomingStream(ctx context.Context, in *AddIncomingStreamRequest, opts ...grpc.CallOption) (*AddIncomingStreamReply, error) {
	out := new(AddIncomingStreamReply)
	err := c.cc.Invoke(ctx, "/StreamD/AddIncomingStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveIncomingStream(ctx context.Context, in *RemoveIncomingStreamRequest, opts ...grpc.CallOption) (*RemoveIncomingStreamReply, error) {
	out := new(RemoveIncomingStreamReply)
	err := c.cc.Invoke(ctx, "/StreamD/RemoveIncomingStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListIncomingStreams(ctx context.Context, in *ListIncomingStreamsRequest, opts ...grpc.CallOption) (*ListIncomingStreamsReply, error) {
	out := new(ListIncomingStreamsReply)
	err := c.cc.Invoke(ctx, "/StreamD/ListIncomingStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListStreamForwards(ctx context.Context, in *ListStreamForwardsRequest, opts ...grpc.CallOption) (*ListStreamForwardsReply, error) {
	out := new(ListStreamForwardsReply)
	err := c.cc.Invoke(ctx, "/StreamD/ListStreamForwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) AddStreamForward(ctx context.Context, in *AddStreamForwardRequest, opts ...grpc.CallOption) (*AddStreamForwardReply, error) {
	out := new(AddStreamForwardReply)
	err := c.cc.Invoke(ctx, "/StreamD/AddStreamForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) UpdateStreamForward(ctx context.Context, in *UpdateStreamForwardRequest, opts ...grpc.CallOption) (*UpdateStreamForwardReply, error) {
	out := new(UpdateStreamForwardReply)
	err := c.cc.Invoke(ctx, "/StreamD/UpdateStreamForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveStreamForward(ctx context.Context, in *RemoveStreamForwardRequest, opts ...grpc.CallOption) (*RemoveStreamForwardReply, error) {
	out := new(RemoveStreamForwardReply)
	err := c.cc.Invoke(ctx, "/StreamD/RemoveStreamForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamDServer is the server API for StreamD service.
// All implementations must embed UnimplementedStreamDServer
// for forward compatibility
type StreamDServer interface {
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error)
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigReply, error)
	SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigReply, error)
	ResetCache(context.Context, *ResetCacheRequest) (*ResetCacheReply, error)
	InitCache(context.Context, *InitCacheRequest) (*InitCacheReply, error)
	StartStream(context.Context, *StartStreamRequest) (*StartStreamReply, error)
	EndStream(context.Context, *EndStreamRequest) (*EndStreamReply, error)
	GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusReply, error)
	IsBackendEnabled(context.Context, *IsBackendEnabledRequest) (*IsBackendEnabledReply, error)
	GetBackendInfo(context.Context, *GetBackendInfoRequest) (*GetBackendInfoReply, error)
	Restart(context.Context, *RestartRequest) (*RestartReply, error)
	SetTitle(context.Context, *SetTitleRequest) (*SetTitleReply, error)
	SetDescription(context.Context, *SetDescriptionRequest) (*SetDescriptionReply, error)
	SetApplyProfile(context.Context, *SetApplyProfileRequest) (*SetApplyProfileReply, error)
	UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamReply, error)
	GetVariable(context.Context, *GetVariableRequest) (*GetVariableReply, error)
	GetVariableHash(context.Context, *GetVariableHashRequest) (*GetVariableHashReply, error)
	SetVariable(context.Context, *SetVariableRequest) (*SetVariableReply, error)
	EXPERIMENTAL_ReinitStreamControllers(context.Context, *EXPERIMENTAL_ReinitStreamControllersRequest) (*EXPERIMENTAL_ReinitStreamControllersReply, error)
	OBSOLETE_FetchConfig(context.Context, *OBSOLETE_FetchConfigRequest) (*OBSOLETE_FetchConfigReply, error)
	OBSOLETE_GitInfo(context.Context, *OBSOLETE_GetGitInfoRequest) (*OBSOLETE_GetGitInfoReply, error)
	OBSOLETE_GitRelogin(context.Context, *OBSOLETE_GitReloginRequest) (*OBSOLETE_GitReloginReply, error)
	SubscribeToOAuthRequests(*SubscribeToOAuthRequestsRequest, StreamD_SubscribeToOAuthRequestsServer) error
	SubmitOAuthCode(context.Context, *SubmitOAuthCodeRequest) (*SubmitOAuthCodeReply, error)
	OBSGetSceneList(context.Context, *OBSGetSceneListRequest) (*OBSGetSceneListReply, error)
	OBSSetCurrentProgramScene(context.Context, *OBSSetCurrentProgramSceneRequest) (*OBSSetCurrentProgramSceneReply, error)
	ListStreamServers(context.Context, *ListStreamServersRequest) (*ListStreamServersReply, error)
	StartStreamServer(context.Context, *StartStreamServerRequest) (*StartStreamServerReply, error)
	StopStreamServer(context.Context, *StopStreamServerRequest) (*StopStreamServerReply, error)
	ListStreamDestinations(context.Context, *ListStreamDestinationsRequest) (*ListStreamDestinationsReply, error)
	AddStreamDestination(context.Context, *AddStreamDestinationRequest) (*AddStreamDestinationReply, error)
	RemoveStreamDestination(context.Context, *RemoveStreamDestinationRequest) (*RemoveStreamDestinationReply, error)
	AddIncomingStream(context.Context, *AddIncomingStreamRequest) (*AddIncomingStreamReply, error)
	RemoveIncomingStream(context.Context, *RemoveIncomingStreamRequest) (*RemoveIncomingStreamReply, error)
	ListIncomingStreams(context.Context, *ListIncomingStreamsRequest) (*ListIncomingStreamsReply, error)
	ListStreamForwards(context.Context, *ListStreamForwardsRequest) (*ListStreamForwardsReply, error)
	AddStreamForward(context.Context, *AddStreamForwardRequest) (*AddStreamForwardReply, error)
	UpdateStreamForward(context.Context, *UpdateStreamForwardRequest) (*UpdateStreamForwardReply, error)
	RemoveStreamForward(context.Context, *RemoveStreamForwardRequest) (*RemoveStreamForwardReply, error)
	mustEmbedUnimplementedStreamDServer()
}

// UnimplementedStreamDServer must be embedded to have forward compatible implementations.
type UnimplementedStreamDServer struct {
}

func (UnimplementedStreamDServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedStreamDServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedStreamDServer) SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedStreamDServer) ResetCache(context.Context, *ResetCacheRequest) (*ResetCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCache not implemented")
}
func (UnimplementedStreamDServer) InitCache(context.Context, *InitCacheRequest) (*InitCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitCache not implemented")
}
func (UnimplementedStreamDServer) StartStream(context.Context, *StartStreamRequest) (*StartStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedStreamDServer) EndStream(context.Context, *EndStreamRequest) (*EndStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndStream not implemented")
}
func (UnimplementedStreamDServer) GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStatus not implemented")
}
func (UnimplementedStreamDServer) IsBackendEnabled(context.Context, *IsBackendEnabledRequest) (*IsBackendEnabledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBackendEnabled not implemented")
}
func (UnimplementedStreamDServer) GetBackendInfo(context.Context, *GetBackendInfoRequest) (*GetBackendInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackendInfo not implemented")
}
func (UnimplementedStreamDServer) Restart(context.Context, *RestartRequest) (*RestartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedStreamDServer) SetTitle(context.Context, *SetTitleRequest) (*SetTitleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTitle not implemented")
}
func (UnimplementedStreamDServer) SetDescription(context.Context, *SetDescriptionRequest) (*SetDescriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDescription not implemented")
}
func (UnimplementedStreamDServer) SetApplyProfile(context.Context, *SetApplyProfileRequest) (*SetApplyProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplyProfile not implemented")
}
func (UnimplementedStreamDServer) UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedStreamDServer) GetVariable(context.Context, *GetVariableRequest) (*GetVariableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedStreamDServer) GetVariableHash(context.Context, *GetVariableHashRequest) (*GetVariableHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariableHash not implemented")
}
func (UnimplementedStreamDServer) SetVariable(context.Context, *SetVariableRequest) (*SetVariableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedStreamDServer) EXPERIMENTAL_ReinitStreamControllers(context.Context, *EXPERIMENTAL_ReinitStreamControllersRequest) (*EXPERIMENTAL_ReinitStreamControllersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXPERIMENTAL_ReinitStreamControllers not implemented")
}
func (UnimplementedStreamDServer) OBSOLETE_FetchConfig(context.Context, *OBSOLETE_FetchConfigRequest) (*OBSOLETE_FetchConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OBSOLETE_FetchConfig not implemented")
}
func (UnimplementedStreamDServer) OBSOLETE_GitInfo(context.Context, *OBSOLETE_GetGitInfoRequest) (*OBSOLETE_GetGitInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OBSOLETE_GitInfo not implemented")
}
func (UnimplementedStreamDServer) OBSOLETE_GitRelogin(context.Context, *OBSOLETE_GitReloginRequest) (*OBSOLETE_GitReloginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OBSOLETE_GitRelogin not implemented")
}
func (UnimplementedStreamDServer) SubscribeToOAuthRequests(*SubscribeToOAuthRequestsRequest, StreamD_SubscribeToOAuthRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToOAuthRequests not implemented")
}
func (UnimplementedStreamDServer) SubmitOAuthCode(context.Context, *SubmitOAuthCodeRequest) (*SubmitOAuthCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOAuthCode not implemented")
}
func (UnimplementedStreamDServer) OBSGetSceneList(context.Context, *OBSGetSceneListRequest) (*OBSGetSceneListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OBSGetSceneList not implemented")
}
func (UnimplementedStreamDServer) OBSSetCurrentProgramScene(context.Context, *OBSSetCurrentProgramSceneRequest) (*OBSSetCurrentProgramSceneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OBSSetCurrentProgramScene not implemented")
}
func (UnimplementedStreamDServer) ListStreamServers(context.Context, *ListStreamServersRequest) (*ListStreamServersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamServers not implemented")
}
func (UnimplementedStreamDServer) StartStreamServer(context.Context, *StartStreamServerRequest) (*StartStreamServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStreamServer not implemented")
}
func (UnimplementedStreamDServer) StopStreamServer(context.Context, *StopStreamServerRequest) (*StopStreamServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStreamServer not implemented")
}
func (UnimplementedStreamDServer) ListStreamDestinations(context.Context, *ListStreamDestinationsRequest) (*ListStreamDestinationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamDestinations not implemented")
}
func (UnimplementedStreamDServer) AddStreamDestination(context.Context, *AddStreamDestinationRequest) (*AddStreamDestinationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStreamDestination not implemented")
}
func (UnimplementedStreamDServer) RemoveStreamDestination(context.Context, *RemoveStreamDestinationRequest) (*RemoveStreamDestinationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamDestination not implemented")
}
func (UnimplementedStreamDServer) AddIncomingStream(context.Context, *AddIncomingStreamRequest) (*AddIncomingStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIncomingStream not implemented")
}
func (UnimplementedStreamDServer) RemoveIncomingStream(context.Context, *RemoveIncomingStreamRequest) (*RemoveIncomingStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIncomingStream not implemented")
}
func (UnimplementedStreamDServer) ListIncomingStreams(context.Context, *ListIncomingStreamsRequest) (*ListIncomingStreamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingStreams not implemented")
}
func (UnimplementedStreamDServer) ListStreamForwards(context.Context, *ListStreamForwardsRequest) (*ListStreamForwardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamForwards not implemented")
}
func (UnimplementedStreamDServer) AddStreamForward(context.Context, *AddStreamForwardRequest) (*AddStreamForwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStreamForward not implemented")
}
func (UnimplementedStreamDServer) UpdateStreamForward(context.Context, *UpdateStreamForwardRequest) (*UpdateStreamForwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamForward not implemented")
}
func (UnimplementedStreamDServer) RemoveStreamForward(context.Context, *RemoveStreamForwardRequest) (*RemoveStreamForwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamForward not implemented")
}
func (UnimplementedStreamDServer) mustEmbedUnimplementedStreamDServer() {}

// UnsafeStreamDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDServer will
// result in compilation errors.
type UnsafeStreamDServer interface {
	mustEmbedUnimplementedStreamDServer()
}

func RegisterStreamDServer(s grpc.ServiceRegistrar, srv StreamDServer) {
	s.RegisterService(&StreamD_ServiceDesc, srv)
}

func _StreamD_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/SaveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SaveConfig(ctx, req.(*SaveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ResetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ResetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/ResetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ResetCache(ctx, req.(*ResetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_InitCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).InitCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/InitCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).InitCache(ctx, req.(*InitCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/StartStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StartStream(ctx, req.(*StartStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_EndStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).EndStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/EndStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).EndStream(ctx, req.(*EndStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/GetStreamStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetStreamStatus(ctx, req.(*GetStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_IsBackendEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBackendEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).IsBackendEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/IsBackendEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).IsBackendEnabled(ctx, req.(*IsBackendEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetBackendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetBackendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/GetBackendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetBackendInfo(ctx, req.(*GetBackendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/SetTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetTitle(ctx, req.(*SetTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/SetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetDescription(ctx, req.(*SetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetApplyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetApplyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/SetApplyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetApplyProfile(ctx, req.(*SetApplyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/UpdateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).UpdateStream(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/GetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetVariable(ctx, req.(*GetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetVariableHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetVariableHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/GetVariableHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetVariableHash(ctx, req.(*GetVariableHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/SetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetVariable(ctx, req.(*SetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_EXPERIMENTAL_ReinitStreamControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EXPERIMENTAL_ReinitStreamControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).EXPERIMENTAL_ReinitStreamControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/EXPERIMENTAL_ReinitStreamControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).EXPERIMENTAL_ReinitStreamControllers(ctx, req.(*EXPERIMENTAL_ReinitStreamControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_OBSOLETE_FetchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OBSOLETE_FetchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).OBSOLETE_FetchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/OBSOLETE_FetchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).OBSOLETE_FetchConfig(ctx, req.(*OBSOLETE_FetchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_OBSOLETE_GitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OBSOLETE_GetGitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).OBSOLETE_GitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/OBSOLETE_GitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).OBSOLETE_GitInfo(ctx, req.(*OBSOLETE_GetGitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_OBSOLETE_GitRelogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OBSOLETE_GitReloginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).OBSOLETE_GitRelogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/OBSOLETE_GitRelogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).OBSOLETE_GitRelogin(ctx, req.(*OBSOLETE_GitReloginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToOAuthRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToOAuthRequestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToOAuthRequests(m, &streamDSubscribeToOAuthRequestsServer{stream})
}

type StreamD_SubscribeToOAuthRequestsServer interface {
	Send(*OAuthRequest) error
	grpc.ServerStream
}

type streamDSubscribeToOAuthRequestsServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToOAuthRequestsServer) Send(m *OAuthRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_SubmitOAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SubmitOAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/SubmitOAuthCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SubmitOAuthCode(ctx, req.(*SubmitOAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_OBSGetSceneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OBSGetSceneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).OBSGetSceneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/OBSGetSceneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).OBSGetSceneList(ctx, req.(*OBSGetSceneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_OBSSetCurrentProgramScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OBSSetCurrentProgramSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).OBSSetCurrentProgramScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/OBSSetCurrentProgramScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).OBSSetCurrentProgramScene(ctx, req.(*OBSSetCurrentProgramSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListStreamServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListStreamServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/ListStreamServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListStreamServers(ctx, req.(*ListStreamServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StartStreamServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StartStreamServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/StartStreamServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StartStreamServer(ctx, req.(*StartStreamServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StopStreamServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStreamServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StopStreamServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/StopStreamServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StopStreamServer(ctx, req.(*StopStreamServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListStreamDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListStreamDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/ListStreamDestinations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListStreamDestinations(ctx, req.(*ListStreamDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_AddStreamDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddStreamDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/AddStreamDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddStreamDestination(ctx, req.(*AddStreamDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveStreamDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveStreamDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/RemoveStreamDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveStreamDestination(ctx, req.(*RemoveStreamDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_AddIncomingStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIncomingStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddIncomingStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/AddIncomingStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddIncomingStream(ctx, req.(*AddIncomingStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveIncomingStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIncomingStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveIncomingStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/RemoveIncomingStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveIncomingStream(ctx, req.(*RemoveIncomingStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListIncomingStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListIncomingStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/ListIncomingStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListIncomingStreams(ctx, req.(*ListIncomingStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListStreamForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamForwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListStreamForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/ListStreamForwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListStreamForwards(ctx, req.(*ListStreamForwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_AddStreamForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddStreamForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/AddStreamForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddStreamForward(ctx, req.(*AddStreamForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_UpdateStreamForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).UpdateStreamForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/UpdateStreamForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).UpdateStreamForward(ctx, req.(*UpdateStreamForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveStreamForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveStreamForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamD/RemoveStreamForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveStreamForward(ctx, req.(*RemoveStreamForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamD_ServiceDesc is the grpc.ServiceDesc for StreamD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamD",
	HandlerType: (*StreamDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _StreamD_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _StreamD_SetConfig_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _StreamD_SaveConfig_Handler,
		},
		{
			MethodName: "ResetCache",
			Handler:    _StreamD_ResetCache_Handler,
		},
		{
			MethodName: "InitCache",
			Handler:    _StreamD_InitCache_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _StreamD_StartStream_Handler,
		},
		{
			MethodName: "EndStream",
			Handler:    _StreamD_EndStream_Handler,
		},
		{
			MethodName: "GetStreamStatus",
			Handler:    _StreamD_GetStreamStatus_Handler,
		},
		{
			MethodName: "IsBackendEnabled",
			Handler:    _StreamD_IsBackendEnabled_Handler,
		},
		{
			MethodName: "GetBackendInfo",
			Handler:    _StreamD_GetBackendInfo_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _StreamD_Restart_Handler,
		},
		{
			MethodName: "SetTitle",
			Handler:    _StreamD_SetTitle_Handler,
		},
		{
			MethodName: "SetDescription",
			Handler:    _StreamD_SetDescription_Handler,
		},
		{
			MethodName: "SetApplyProfile",
			Handler:    _StreamD_SetApplyProfile_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _StreamD_UpdateStream_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _StreamD_GetVariable_Handler,
		},
		{
			MethodName: "GetVariableHash",
			Handler:    _StreamD_GetVariableHash_Handler,
		},
		{
			MethodName: "SetVariable",
			Handler:    _StreamD_SetVariable_Handler,
		},
		{
			MethodName: "EXPERIMENTAL_ReinitStreamControllers",
			Handler:    _StreamD_EXPERIMENTAL_ReinitStreamControllers_Handler,
		},
		{
			MethodName: "OBSOLETE_FetchConfig",
			Handler:    _StreamD_OBSOLETE_FetchConfig_Handler,
		},
		{
			MethodName: "OBSOLETE_GitInfo",
			Handler:    _StreamD_OBSOLETE_GitInfo_Handler,
		},
		{
			MethodName: "OBSOLETE_GitRelogin",
			Handler:    _StreamD_OBSOLETE_GitRelogin_Handler,
		},
		{
			MethodName: "SubmitOAuthCode",
			Handler:    _StreamD_SubmitOAuthCode_Handler,
		},
		{
			MethodName: "OBSGetSceneList",
			Handler:    _StreamD_OBSGetSceneList_Handler,
		},
		{
			MethodName: "OBSSetCurrentProgramScene",
			Handler:    _StreamD_OBSSetCurrentProgramScene_Handler,
		},
		{
			MethodName: "ListStreamServers",
			Handler:    _StreamD_ListStreamServers_Handler,
		},
		{
			MethodName: "StartStreamServer",
			Handler:    _StreamD_StartStreamServer_Handler,
		},
		{
			MethodName: "StopStreamServer",
			Handler:    _StreamD_StopStreamServer_Handler,
		},
		{
			MethodName: "ListStreamDestinations",
			Handler:    _StreamD_ListStreamDestinations_Handler,
		},
		{
			MethodName: "AddStreamDestination",
			Handler:    _StreamD_AddStreamDestination_Handler,
		},
		{
			MethodName: "RemoveStreamDestination",
			Handler:    _StreamD_RemoveStreamDestination_Handler,
		},
		{
			MethodName: "AddIncomingStream",
			Handler:    _StreamD_AddIncomingStream_Handler,
		},
		{
			MethodName: "RemoveIncomingStream",
			Handler:    _StreamD_RemoveIncomingStream_Handler,
		},
		{
			MethodName: "ListIncomingStreams",
			Handler:    _StreamD_ListIncomingStreams_Handler,
		},
		{
			MethodName: "ListStreamForwards",
			Handler:    _StreamD_ListStreamForwards_Handler,
		},
		{
			MethodName: "AddStreamForward",
			Handler:    _StreamD_AddStreamForward_Handler,
		},
		{
			MethodName: "UpdateStreamForward",
			Handler:    _StreamD_UpdateStreamForward_Handler,
		},
		{
			MethodName: "RemoveStreamForward",
			Handler:    _StreamD_RemoveStreamForward_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToOAuthRequests",
			Handler:       _StreamD_SubscribeToOAuthRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamd.proto",
}
