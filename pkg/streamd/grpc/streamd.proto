syntax = "proto3";
option go_package = "go/streamd_grpc";

service StreamD {
    rpc GetConfig(GetConfigRequest) returns (GetConfigReply) {}
    rpc SetConfig(SetConfigRequest) returns (SetConfigReply) {}
    rpc SaveConfig(SaveConfigRequest) returns (SaveConfigReply) {}
    rpc ResetCache(ResetCacheRequest) returns (ResetCacheReply) {}
    rpc InitCache(InitCacheRequest) returns (InitCacheReply) {}
    rpc StartStream(StartStreamRequest) returns (StartStreamReply) {}
    rpc EndStream(EndStreamRequest) returns (EndStreamReply) {}
    rpc GetStreamStatus(GetStreamStatusRequest) returns (GetStreamStatusReply) {}
    rpc GetBackendInfo(GetBackendInfoRequest) returns (GetBackendInfoReply) {}
    rpc Restart(RestartRequest) returns (RestartReply) {}
    rpc SetTitle(SetTitleRequest) returns (SetTitleReply) {}
    rpc SetDescription(SetDescriptionRequest) returns (SetDescriptionReply) {}
    rpc SetApplyProfile(SetApplyProfileRequest) returns (SetApplyProfileReply) {}
    rpc UpdateStream(UpdateStreamRequest) returns (UpdateStreamReply) {}
    rpc GetVariable(GetVariableRequest) returns(GetVariableReply) {}
    rpc GetVariableHash(GetVariableHashRequest) returns(GetVariableHashReply) {}
    rpc SetVariable(SetVariableRequest) returns(SetVariableReply) {}

    rpc EXPERIMENTAL_ReinitStreamControllers(EXPERIMENTAL_ReinitStreamControllersRequest) returns (EXPERIMENTAL_ReinitStreamControllersReply) {}

    rpc OBSOLETE_FetchConfig(OBSOLETE_FetchConfigRequest) returns (OBSOLETE_FetchConfigReply) {}
    rpc OBSOLETE_GitInfo(OBSOLETE_GetGitInfoRequest) returns (OBSOLETE_GetGitInfoReply) {}
    rpc OBSOLETE_GitRelogin(OBSOLETE_GitReloginRequest) returns (OBSOLETE_GitReloginReply) {}

    rpc SubscribeToOAuthRequests(SubscribeToOAuthRequestsRequest) returns (stream OAuthRequest) {}
    rpc SubmitOAuthCode(SubmitOAuthCodeRequest) returns (SubmitOAuthCodeReply) {}

    rpc OBSGetSceneList(OBSGetSceneListRequest) returns (OBSGetSceneListReply) {}
    rpc OBSSetCurrentProgramScene(OBSSetCurrentProgramSceneRequest) returns (OBSSetCurrentProgramSceneReply) {}

    rpc ListStreamServers(ListStreamServersRequest) returns (ListStreamServersReply) {}
	rpc StartStreamServer(StartStreamServerRequest) returns (StartStreamServerReply) {}
	rpc StopStreamServer(StopStreamServerRequest) returns (StopStreamServerReply) {}
	rpc ListStreamDestinations(ListStreamDestinationsRequest) returns (ListStreamDestinationsReply) {}
	rpc AddStreamDestination(AddStreamDestinationRequest) returns (AddStreamDestinationReply) {}
	rpc RemoveStreamDestination(RemoveStreamDestinationRequest) returns (RemoveStreamDestinationReply) {}
    rpc ListIncomingStreams(ListIncomingStreamsRequest) returns (ListIncomingStreamsReply) {}
	rpc ListStreamForwards(ListStreamForwardsRequest) returns (ListStreamForwardsReply) {}
	rpc AddStreamForward(AddStreamForwardRequest) returns (AddStreamForwardReply) {}
	rpc RemoveStreamForward(RemoveStreamForwardRequest) returns (RemoveStreamForwardReply) {}
}

message GetConfigRequest {}
message GetConfigReply {
    string config = 1;
}
message SetConfigRequest {
    string config = 1;
}
message SetConfigReply {}
message SaveConfigRequest {}
message SaveConfigReply {}
message ResetCacheRequest {}
message ResetCacheReply {}
message InitCacheRequest {}
message InitCacheReply {}
message StartStreamRequest {
    string platID = 1;
    string title = 2;
    string description = 3;
    string profile = 4;
}
message StartStreamReply {}
message EndStreamRequest {
    string platID = 1;
}
message EndStreamReply {}
message GetStreamStatusRequest {
    string platID = 1;
    bool noCache = 2;
}
message GetStreamStatusReply {
    bool isActive = 1;
    optional int64 started_at = 2;
    string customData = 3;
}
message GetBackendInfoRequest {
    string platID = 1;
}
message GetBackendInfoReply {
    bool isInitialized = 1;
    string data = 2;
}
message RestartRequest {}
message RestartReply {}

message SetTitleRequest {
    string platID = 1;
    string title = 2;
}
message SetTitleReply {}
message SetDescriptionRequest  {
    string platID = 1;
    string description = 2;
}
message SetDescriptionReply {}
message SetApplyProfileRequest {
    string platID = 1;
    string profile = 2;
}
message SetApplyProfileReply {}
message UpdateStreamRequest {
    string platID = 1;
    string title = 2;
    string description = 3;
    string profile = 4;
}
message UpdateStreamReply {}


message EXPERIMENTAL_ReinitStreamControllersRequest {}
message EXPERIMENTAL_ReinitStreamControllersReply {}

message OBSOLETE_FetchConfigRequest {}
message OBSOLETE_FetchConfigReply {}
message OBSOLETE_GetGitInfoRequest {}
message OBSOLETE_GetGitInfoReply {
    bool isInitialized = 1;
}
message OBSOLETE_GitReloginRequest {}
message OBSOLETE_GitReloginReply {}


message SubscribeToOAuthRequestsRequest{
    int32 listenPort = 1;
}
message OAuthRequest{
    string platID = 1;
    string authURL = 2;
}

message GetVariableRequest {
    string key =  1;
}
message GetVariableReply {
    string key = 1;
    bytes value = 2;
}
message GetVariableHashRequest {
    string key = 1;
    HashType hashType = 2; 
}
message GetVariableHashReply {
    string key = 1;
    HashType hashType = 2; 
    bytes hash = 3;
}
message SetVariableRequest {
    string key = 1;
    bytes value = 2;
}
message SetVariableReply {}

enum HashType {
    HASH_SHA1 = 0;
}

message OBSGetSceneListRequest {}
message OBSScene {
    string uuid = 1;
    int32 index = 2;
    string name = 3;
}
message OBSGetSceneListReply {
    string currentPreviewSceneName = 1;
    string currentPreviewSceneUUID = 2;
    string currentProgramSceneName = 3;
    string currentProgramSceneUUID = 4;
    repeated OBSScene scenes = 5;
}
message OBSSetCurrentProgramSceneRequest {
    oneof OBSSceneID {
        string sceneName = 1;
        string sceneUUID = 2;
    }
}
message OBSSetCurrentProgramSceneReply {}

message SubmitOAuthCodeRequest {
    string platID = 1;
    string code = 2;
}
message SubmitOAuthCodeReply {}

enum StreamServerType {
    Undefined = 0;
    RTSP = 1;
    RTMP = 2;
}

message StreamServer {
    StreamServerType serverType = 1;
    string listenAddr = 2;
}

message ListStreamServersRequest {}
message ListStreamServersReply {
    repeated StreamServer streamServers = 1;
}

message StartStreamServerRequest {
    StreamServer config = 1;
}
message StartStreamServerReply {
}

message StopStreamServerRequest {
    string listenAddr = 1;
}
message StopStreamServerReply {}

message StreamDestination {
    string streamID = 1;
    string url = 2;
}

message ListStreamDestinationsRequest {}
message ListStreamDestinationsReply {
    repeated StreamDestination streamDestinations = 1;
}

message AddStreamDestinationRequest {
    StreamDestination config = 1;
}
message AddStreamDestinationReply {}

message RemoveStreamDestinationRequest {
    string streamID = 1;
}
message RemoveStreamDestinationReply {}

message IncomingStream {
    string streamID = 1;
}

message ListIncomingStreamsRequest {}
message ListIncomingStreamsReply {
    repeated IncomingStream incomingStreams = 1;
}

message StreamForward {
    string streamIDSrc = 1;
    string streamIDDst = 2;
}

message ListStreamForwardsRequest {}
message ListStreamForwardsReply {
    repeated StreamForward streamForwards = 1;
}

message AddStreamForwardRequest {
    StreamForward config = 1;
}
message AddStreamForwardReply {}

message RemoveStreamForwardRequest {
    StreamForward config = 1;
}
message RemoveStreamForwardReply {}
