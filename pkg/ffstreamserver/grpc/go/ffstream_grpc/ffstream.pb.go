// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: ffstream.proto

package ffstream_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoggingLevel int32

const (
	LoggingLevel_LoggingLevelNone  LoggingLevel = 0
	LoggingLevel_LoggingLevelFatal LoggingLevel = 1
	LoggingLevel_LoggingLevelPanic LoggingLevel = 2
	LoggingLevel_LoggingLevelError LoggingLevel = 3
	LoggingLevel_LoggingLevelWarn  LoggingLevel = 4
	LoggingLevel_LoggingLevelInfo  LoggingLevel = 5
	LoggingLevel_LoggingLevelDebug LoggingLevel = 6
	LoggingLevel_LoggingLevelTrace LoggingLevel = 7
)

// Enum value maps for LoggingLevel.
var (
	LoggingLevel_name = map[int32]string{
		0: "LoggingLevelNone",
		1: "LoggingLevelFatal",
		2: "LoggingLevelPanic",
		3: "LoggingLevelError",
		4: "LoggingLevelWarn",
		5: "LoggingLevelInfo",
		6: "LoggingLevelDebug",
		7: "LoggingLevelTrace",
	}
	LoggingLevel_value = map[string]int32{
		"LoggingLevelNone":  0,
		"LoggingLevelFatal": 1,
		"LoggingLevelPanic": 2,
		"LoggingLevelError": 3,
		"LoggingLevelWarn":  4,
		"LoggingLevelInfo":  5,
		"LoggingLevelDebug": 6,
		"LoggingLevelTrace": 7,
	}
)

func (x LoggingLevel) Enum() *LoggingLevel {
	p := new(LoggingLevel)
	*p = x
	return p
}

func (x LoggingLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_ffstream_proto_enumTypes[0].Descriptor()
}

func (LoggingLevel) Type() protoreflect.EnumType {
	return &file_ffstream_proto_enumTypes[0]
}

func (x LoggingLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingLevel.Descriptor instead.
func (LoggingLevel) EnumDescriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{0}
}

type FlagInt int32

const (
	FlagInt_undefined FlagInt = 0
	FlagInt_Latency   FlagInt = 1
)

// Enum value maps for FlagInt.
var (
	FlagInt_name = map[int32]string{
		0: "undefined",
		1: "Latency",
	}
	FlagInt_value = map[string]int32{
		"undefined": 0,
		"Latency":   1,
	}
)

func (x FlagInt) Enum() *FlagInt {
	p := new(FlagInt)
	*p = x
	return p
}

func (x FlagInt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagInt) Descriptor() protoreflect.EnumDescriptor {
	return file_ffstream_proto_enumTypes[1].Descriptor()
}

func (FlagInt) Type() protoreflect.EnumType {
	return &file_ffstream_proto_enumTypes[1]
}

func (x FlagInt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagInt.Descriptor instead.
func (FlagInt) EnumDescriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{1}
}

type SetLoggingLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LoggingLevel `protobuf:"varint,1,opt,name=level,proto3,enum=ffstream_grpc.LoggingLevel" json:"level,omitempty"`
}

func (x *SetLoggingLevelRequest) Reset() {
	*x = SetLoggingLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLoggingLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLoggingLevelRequest) ProtoMessage() {}

func (x *SetLoggingLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLoggingLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLoggingLevelRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{0}
}

func (x *SetLoggingLevelRequest) GetLevel() LoggingLevel {
	if x != nil {
		return x.Level
	}
	return LoggingLevel_LoggingLevelNone
}

type SetLoggingLevelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetLoggingLevelReply) Reset() {
	*x = SetLoggingLevelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLoggingLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLoggingLevelReply) ProtoMessage() {}

func (x *SetLoggingLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLoggingLevelReply.ProtoReflect.Descriptor instead.
func (*SetLoggingLevelReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{1}
}

type CustomOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CustomOption) Reset() {
	*x = CustomOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomOption) ProtoMessage() {}

func (x *CustomOption) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomOption.ProtoReflect.Descriptor instead.
func (*CustomOption) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{2}
}

func (x *CustomOption) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CustomOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AddInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string          `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	CustomOptions []*CustomOption `protobuf:"bytes,2,rep,name=customOptions,proto3" json:"customOptions,omitempty"`
}

func (x *AddInputRequest) Reset() {
	*x = AddInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInputRequest) ProtoMessage() {}

func (x *AddInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInputRequest.ProtoReflect.Descriptor instead.
func (*AddInputRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{3}
}

func (x *AddInputRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddInputRequest) GetCustomOptions() []*CustomOption {
	if x != nil {
		return x.CustomOptions
	}
	return nil
}

type AddInputReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddInputReply) Reset() {
	*x = AddInputReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInputReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInputReply) ProtoMessage() {}

func (x *AddInputReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInputReply.ProtoReflect.Descriptor instead.
func (*AddInputReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{4}
}

func (x *AddInputReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AddOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string          `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	CustomOptions []*CustomOption `protobuf:"bytes,2,rep,name=customOptions,proto3" json:"customOptions,omitempty"`
}

func (x *AddOutputRequest) Reset() {
	*x = AddOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOutputRequest) ProtoMessage() {}

func (x *AddOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOutputRequest.ProtoReflect.Descriptor instead.
func (*AddOutputRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{5}
}

func (x *AddOutputRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddOutputRequest) GetCustomOptions() []*CustomOption {
	if x != nil {
		return x.CustomOptions
	}
	return nil
}

type AddOutputReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddOutputReply) Reset() {
	*x = AddOutputReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOutputReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOutputReply) ProtoMessage() {}

func (x *AddOutputReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOutputReply.ProtoReflect.Descriptor instead.
func (*AddOutputReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{6}
}

func (x *AddOutputReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveOutputRequest) Reset() {
	*x = RemoveOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOutputRequest) ProtoMessage() {}

func (x *RemoveOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOutputRequest.ProtoReflect.Descriptor instead.
func (*RemoveOutputRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveOutputRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveOutputReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveOutputReply) Reset() {
	*x = RemoveOutputReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOutputReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOutputReply) ProtoMessage() {}

func (x *RemoveOutputReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOutputReply.ProtoReflect.Descriptor instead.
func (*RemoveOutputReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{8}
}

type CodecConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodecName                       string          `protobuf:"bytes,1,opt,name=codecName,proto3" json:"codecName,omitempty"`
	BitRateAveragerBufferSizeInBits uint64          `protobuf:"varint,2,opt,name=bitRateAveragerBufferSizeInBits,proto3" json:"bitRateAveragerBufferSizeInBits,omitempty"`
	AverageBitRate                  uint64          `protobuf:"varint,3,opt,name=AverageBitRate,proto3" json:"AverageBitRate,omitempty"`
	CustomOptions                   []*CustomOption `protobuf:"bytes,4,rep,name=customOptions,proto3" json:"customOptions,omitempty"`
}

func (x *CodecConfig) Reset() {
	*x = CodecConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecConfig) ProtoMessage() {}

func (x *CodecConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecConfig.ProtoReflect.Descriptor instead.
func (*CodecConfig) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{9}
}

func (x *CodecConfig) GetCodecName() string {
	if x != nil {
		return x.CodecName
	}
	return ""
}

func (x *CodecConfig) GetBitRateAveragerBufferSizeInBits() uint64 {
	if x != nil {
		return x.BitRateAveragerBufferSizeInBits
	}
	return 0
}

func (x *CodecConfig) GetAverageBitRate() uint64 {
	if x != nil {
		return x.AverageBitRate
	}
	return 0
}

func (x *CodecConfig) GetCustomOptions() []*CustomOption {
	if x != nil {
		return x.CustomOptions
	}
	return nil
}

type EncoderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audio *CodecConfig `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	Video *CodecConfig `protobuf:"bytes,2,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *EncoderConfig) Reset() {
	*x = EncoderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncoderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncoderConfig) ProtoMessage() {}

func (x *EncoderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncoderConfig.ProtoReflect.Descriptor instead.
func (*EncoderConfig) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{10}
}

func (x *EncoderConfig) GetAudio() *CodecConfig {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *EncoderConfig) GetVideo() *CodecConfig {
	if x != nil {
		return x.Video
	}
	return nil
}

type GetEncoderConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEncoderConfigRequest) Reset() {
	*x = GetEncoderConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEncoderConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncoderConfigRequest) ProtoMessage() {}

func (x *GetEncoderConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncoderConfigRequest.ProtoReflect.Descriptor instead.
func (*GetEncoderConfigRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{11}
}

type GetEncoderConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *EncoderConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetEncoderConfigReply) Reset() {
	*x = GetEncoderConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEncoderConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncoderConfigReply) ProtoMessage() {}

func (x *GetEncoderConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncoderConfigReply.ProtoReflect.Descriptor instead.
func (*GetEncoderConfigReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{12}
}

func (x *GetEncoderConfigReply) GetConfig() *EncoderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetEncoderConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *EncoderConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetEncoderConfigRequest) Reset() {
	*x = SetEncoderConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEncoderConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEncoderConfigRequest) ProtoMessage() {}

func (x *SetEncoderConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEncoderConfigRequest.ProtoReflect.Descriptor instead.
func (*SetEncoderConfigRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{13}
}

func (x *SetEncoderConfigRequest) GetConfig() *EncoderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetEncoderConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetEncoderConfigReply) Reset() {
	*x = SetEncoderConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEncoderConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEncoderConfigReply) ProtoMessage() {}

func (x *SetEncoderConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEncoderConfigReply.ProtoReflect.Descriptor instead.
func (*SetEncoderConfigReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{14}
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{15}
}

type StartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartReply) Reset() {
	*x = StartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReply) ProtoMessage() {}

func (x *StartReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReply.ProtoReflect.Descriptor instead.
func (*StartReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{16}
}

type GetEncoderStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEncoderStatsRequest) Reset() {
	*x = GetEncoderStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEncoderStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncoderStatsRequest) ProtoMessage() {}

func (x *GetEncoderStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncoderStatsRequest.ProtoReflect.Descriptor instead.
func (*GetEncoderStatsRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{17}
}

type GetEncoderStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesCountRead              uint64 `protobuf:"varint,1,opt,name=BytesCountRead,proto3" json:"BytesCountRead,omitempty"`
	BytesCountWrote             uint64 `protobuf:"varint,2,opt,name=BytesCountWrote,proto3" json:"BytesCountWrote,omitempty"`
	FramesReadUnparsed          uint64 `protobuf:"varint,3,opt,name=FramesReadUnparsed,proto3" json:"FramesReadUnparsed,omitempty"`
	FramesReadVideoUnprocessed  uint64 `protobuf:"varint,4,opt,name=FramesReadVideoUnprocessed,proto3" json:"FramesReadVideoUnprocessed,omitempty"`
	FramesReadAudioUnprocessed  uint64 `protobuf:"varint,5,opt,name=FramesReadAudioUnprocessed,proto3" json:"FramesReadAudioUnprocessed,omitempty"`
	FramesReadVideoProcessed    uint64 `protobuf:"varint,6,opt,name=FramesReadVideoProcessed,proto3" json:"FramesReadVideoProcessed,omitempty"`
	FramesReadAudioProcessed    uint64 `protobuf:"varint,7,opt,name=FramesReadAudioProcessed,proto3" json:"FramesReadAudioProcessed,omitempty"`
	FramesWroteUnparsed         uint64 `protobuf:"varint,8,opt,name=FramesWroteUnparsed,proto3" json:"FramesWroteUnparsed,omitempty"`
	FramesWroteVideoUnprocessed uint64 `protobuf:"varint,9,opt,name=FramesWroteVideoUnprocessed,proto3" json:"FramesWroteVideoUnprocessed,omitempty"`
	FramesWroteAudioUnprocessed uint64 `protobuf:"varint,10,opt,name=FramesWroteAudioUnprocessed,proto3" json:"FramesWroteAudioUnprocessed,omitempty"`
	FramesWroteVideoProcessed   uint64 `protobuf:"varint,11,opt,name=FramesWroteVideoProcessed,proto3" json:"FramesWroteVideoProcessed,omitempty"`
	FramesWroteAudioProcessed   uint64 `protobuf:"varint,12,opt,name=FramesWroteAudioProcessed,proto3" json:"FramesWroteAudioProcessed,omitempty"`
}

func (x *GetEncoderStatsReply) Reset() {
	*x = GetEncoderStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEncoderStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncoderStatsReply) ProtoMessage() {}

func (x *GetEncoderStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncoderStatsReply.ProtoReflect.Descriptor instead.
func (*GetEncoderStatsReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{18}
}

func (x *GetEncoderStatsReply) GetBytesCountRead() uint64 {
	if x != nil {
		return x.BytesCountRead
	}
	return 0
}

func (x *GetEncoderStatsReply) GetBytesCountWrote() uint64 {
	if x != nil {
		return x.BytesCountWrote
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesReadUnparsed() uint64 {
	if x != nil {
		return x.FramesReadUnparsed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesReadVideoUnprocessed() uint64 {
	if x != nil {
		return x.FramesReadVideoUnprocessed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesReadAudioUnprocessed() uint64 {
	if x != nil {
		return x.FramesReadAudioUnprocessed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesReadVideoProcessed() uint64 {
	if x != nil {
		return x.FramesReadVideoProcessed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesReadAudioProcessed() uint64 {
	if x != nil {
		return x.FramesReadAudioProcessed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesWroteUnparsed() uint64 {
	if x != nil {
		return x.FramesWroteUnparsed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesWroteVideoUnprocessed() uint64 {
	if x != nil {
		return x.FramesWroteVideoUnprocessed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesWroteAudioUnprocessed() uint64 {
	if x != nil {
		return x.FramesWroteAudioUnprocessed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesWroteVideoProcessed() uint64 {
	if x != nil {
		return x.FramesWroteVideoProcessed
	}
	return 0
}

func (x *GetEncoderStatsReply) GetFramesWroteAudioProcessed() uint64 {
	if x != nil {
		return x.FramesWroteAudioProcessed
	}
	return 0
}

type GetOutputSRTStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOutputSRTStatsRequest) Reset() {
	*x = GetOutputSRTStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutputSRTStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutputSRTStatsRequest) ProtoMessage() {}

func (x *GetOutputSRTStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutputSRTStatsRequest.ProtoReflect.Descriptor instead.
func (*GetOutputSRTStatsRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{19}
}

type GetOutputSRTStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsTimeStamp             int64   `protobuf:"varint,1,opt,name=msTimeStamp,proto3" json:"msTimeStamp,omitempty"`
	PktSentTotal            int64   `protobuf:"varint,2,opt,name=pktSentTotal,proto3" json:"pktSentTotal,omitempty"`
	PktRecvTotal            int64   `protobuf:"varint,3,opt,name=pktRecvTotal,proto3" json:"pktRecvTotal,omitempty"`
	PktSndLossTotal         int64   `protobuf:"varint,4,opt,name=pktSndLossTotal,proto3" json:"pktSndLossTotal,omitempty"`
	PktRcvLossTotal         int64   `protobuf:"varint,5,opt,name=pktRcvLossTotal,proto3" json:"pktRcvLossTotal,omitempty"`
	PktRetransTotal         int64   `protobuf:"varint,6,opt,name=pktRetransTotal,proto3" json:"pktRetransTotal,omitempty"`
	PktSentACKTotal         int64   `protobuf:"varint,7,opt,name=pktSentACKTotal,proto3" json:"pktSentACKTotal,omitempty"`
	PktRecvACKTotal         int64   `protobuf:"varint,8,opt,name=pktRecvACKTotal,proto3" json:"pktRecvACKTotal,omitempty"`
	PktSentNAKTotal         int64   `protobuf:"varint,9,opt,name=pktSentNAKTotal,proto3" json:"pktSentNAKTotal,omitempty"`
	PktRecvNAKTotal         int64   `protobuf:"varint,10,opt,name=pktRecvNAKTotal,proto3" json:"pktRecvNAKTotal,omitempty"`
	UsSndDurationTotal      int64   `protobuf:"varint,11,opt,name=usSndDurationTotal,proto3" json:"usSndDurationTotal,omitempty"`
	PktSndDropTotal         int64   `protobuf:"varint,12,opt,name=pktSndDropTotal,proto3" json:"pktSndDropTotal,omitempty"`
	PktRcvDropTotal         int64   `protobuf:"varint,13,opt,name=pktRcvDropTotal,proto3" json:"pktRcvDropTotal,omitempty"`
	PktRcvUndecryptTotal    int64   `protobuf:"varint,14,opt,name=pktRcvUndecryptTotal,proto3" json:"pktRcvUndecryptTotal,omitempty"`
	ByteSentTotal           uint64  `protobuf:"varint,15,opt,name=byteSentTotal,proto3" json:"byteSentTotal,omitempty"`
	ByteRecvTotal           uint64  `protobuf:"varint,16,opt,name=byteRecvTotal,proto3" json:"byteRecvTotal,omitempty"`
	ByteRcvLossTotal        uint64  `protobuf:"varint,17,opt,name=byteRcvLossTotal,proto3" json:"byteRcvLossTotal,omitempty"`
	ByteRetransTotal        uint64  `protobuf:"varint,18,opt,name=byteRetransTotal,proto3" json:"byteRetransTotal,omitempty"`
	ByteSndDropTotal        uint64  `protobuf:"varint,19,opt,name=byteSndDropTotal,proto3" json:"byteSndDropTotal,omitempty"`
	ByteRcvDropTotal        uint64  `protobuf:"varint,20,opt,name=byteRcvDropTotal,proto3" json:"byteRcvDropTotal,omitempty"`
	ByteRcvUndecryptTotal   uint64  `protobuf:"varint,21,opt,name=byteRcvUndecryptTotal,proto3" json:"byteRcvUndecryptTotal,omitempty"`
	PktSent                 int64   `protobuf:"varint,22,opt,name=pktSent,proto3" json:"pktSent,omitempty"`
	PktRecv                 int64   `protobuf:"varint,23,opt,name=pktRecv,proto3" json:"pktRecv,omitempty"`
	PktSndLoss              int64   `protobuf:"varint,24,opt,name=pktSndLoss,proto3" json:"pktSndLoss,omitempty"`
	PktRcvLoss              int64   `protobuf:"varint,25,opt,name=pktRcvLoss,proto3" json:"pktRcvLoss,omitempty"`
	PktRetrans              int64   `protobuf:"varint,26,opt,name=pktRetrans,proto3" json:"pktRetrans,omitempty"`
	PktRcvRetrans           int64   `protobuf:"varint,27,opt,name=pktRcvRetrans,proto3" json:"pktRcvRetrans,omitempty"`
	PktSentACK              int64   `protobuf:"varint,28,opt,name=pktSentACK,proto3" json:"pktSentACK,omitempty"`
	PktRecvACK              int64   `protobuf:"varint,29,opt,name=pktRecvACK,proto3" json:"pktRecvACK,omitempty"`
	PktSentNAK              int64   `protobuf:"varint,30,opt,name=pktSentNAK,proto3" json:"pktSentNAK,omitempty"`
	PktRecvNAK              int64   `protobuf:"varint,31,opt,name=pktRecvNAK,proto3" json:"pktRecvNAK,omitempty"`
	MbpsSendRate            float64 `protobuf:"fixed64,32,opt,name=mbpsSendRate,proto3" json:"mbpsSendRate,omitempty"`
	MbpsRecvRate            float64 `protobuf:"fixed64,33,opt,name=mbpsRecvRate,proto3" json:"mbpsRecvRate,omitempty"`
	UsSndDuration           int64   `protobuf:"varint,34,opt,name=usSndDuration,proto3" json:"usSndDuration,omitempty"`
	PktReorderDistance      int64   `protobuf:"varint,35,opt,name=pktReorderDistance,proto3" json:"pktReorderDistance,omitempty"`
	PktRcvAvgBelatedTime    float64 `protobuf:"fixed64,36,opt,name=pktRcvAvgBelatedTime,proto3" json:"pktRcvAvgBelatedTime,omitempty"`
	PktRcvBelated           int64   `protobuf:"varint,37,opt,name=pktRcvBelated,proto3" json:"pktRcvBelated,omitempty"`
	PktSndDrop              int64   `protobuf:"varint,38,opt,name=pktSndDrop,proto3" json:"pktSndDrop,omitempty"`
	PktRcvDrop              int64   `protobuf:"varint,39,opt,name=pktRcvDrop,proto3" json:"pktRcvDrop,omitempty"`
	PktRcvUndecrypt         int64   `protobuf:"varint,40,opt,name=pktRcvUndecrypt,proto3" json:"pktRcvUndecrypt,omitempty"`
	ByteSent                uint64  `protobuf:"varint,41,opt,name=byteSent,proto3" json:"byteSent,omitempty"`
	ByteRecv                uint64  `protobuf:"varint,42,opt,name=byteRecv,proto3" json:"byteRecv,omitempty"`
	ByteRcvLoss             uint64  `protobuf:"varint,43,opt,name=byteRcvLoss,proto3" json:"byteRcvLoss,omitempty"`
	ByteRetrans             uint64  `protobuf:"varint,44,opt,name=byteRetrans,proto3" json:"byteRetrans,omitempty"`
	ByteSndDrop             uint64  `protobuf:"varint,45,opt,name=byteSndDrop,proto3" json:"byteSndDrop,omitempty"`
	ByteRcvDrop             uint64  `protobuf:"varint,46,opt,name=byteRcvDrop,proto3" json:"byteRcvDrop,omitempty"`
	ByteRcvUndecrypt        uint64  `protobuf:"varint,47,opt,name=byteRcvUndecrypt,proto3" json:"byteRcvUndecrypt,omitempty"`
	UsPktSndPeriod          float64 `protobuf:"fixed64,48,opt,name=usPktSndPeriod,proto3" json:"usPktSndPeriod,omitempty"`
	PktFlowWindow           int64   `protobuf:"varint,49,opt,name=pktFlowWindow,proto3" json:"pktFlowWindow,omitempty"`
	PktCongestionWindow     int64   `protobuf:"varint,50,opt,name=pktCongestionWindow,proto3" json:"pktCongestionWindow,omitempty"`
	PktFlightSize           int64   `protobuf:"varint,51,opt,name=pktFlightSize,proto3" json:"pktFlightSize,omitempty"`
	MsRTT                   float64 `protobuf:"fixed64,52,opt,name=msRTT,proto3" json:"msRTT,omitempty"`
	MbpsBandwidth           float64 `protobuf:"fixed64,53,opt,name=mbpsBandwidth,proto3" json:"mbpsBandwidth,omitempty"`
	ByteAvailSndBuf         int64   `protobuf:"varint,54,opt,name=byteAvailSndBuf,proto3" json:"byteAvailSndBuf,omitempty"`
	ByteAvailRcvBuf         int64   `protobuf:"varint,55,opt,name=byteAvailRcvBuf,proto3" json:"byteAvailRcvBuf,omitempty"`
	MbpsMaxBW               float64 `protobuf:"fixed64,56,opt,name=mbpsMaxBW,proto3" json:"mbpsMaxBW,omitempty"`
	ByteMSS                 int64   `protobuf:"varint,57,opt,name=byteMSS,proto3" json:"byteMSS,omitempty"`
	PktSndBuf               int64   `protobuf:"varint,58,opt,name=pktSndBuf,proto3" json:"pktSndBuf,omitempty"`
	ByteSndBuf              int64   `protobuf:"varint,59,opt,name=byteSndBuf,proto3" json:"byteSndBuf,omitempty"`
	MsSndBuf                int64   `protobuf:"varint,60,opt,name=msSndBuf,proto3" json:"msSndBuf,omitempty"`
	MsSndTsbPdDelay         int64   `protobuf:"varint,61,opt,name=msSndTsbPdDelay,proto3" json:"msSndTsbPdDelay,omitempty"`
	PktRcvBuf               int64   `protobuf:"varint,62,opt,name=pktRcvBuf,proto3" json:"pktRcvBuf,omitempty"`
	ByteRcvBuf              int64   `protobuf:"varint,63,opt,name=byteRcvBuf,proto3" json:"byteRcvBuf,omitempty"`
	MsRcvBuf                int64   `protobuf:"varint,64,opt,name=msRcvBuf,proto3" json:"msRcvBuf,omitempty"`
	MsRcvTsbPdDelay         int64   `protobuf:"varint,65,opt,name=msRcvTsbPdDelay,proto3" json:"msRcvTsbPdDelay,omitempty"`
	PktSndFilterExtraTotal  int64   `protobuf:"varint,66,opt,name=pktSndFilterExtraTotal,proto3" json:"pktSndFilterExtraTotal,omitempty"`
	PktRcvFilterExtraTotal  int64   `protobuf:"varint,67,opt,name=pktRcvFilterExtraTotal,proto3" json:"pktRcvFilterExtraTotal,omitempty"`
	PktRcvFilterSupplyTotal int64   `protobuf:"varint,68,opt,name=pktRcvFilterSupplyTotal,proto3" json:"pktRcvFilterSupplyTotal,omitempty"`
	PktRcvFilterLossTotal   int64   `protobuf:"varint,69,opt,name=pktRcvFilterLossTotal,proto3" json:"pktRcvFilterLossTotal,omitempty"`
	PktSndFilterExtra       int64   `protobuf:"varint,70,opt,name=pktSndFilterExtra,proto3" json:"pktSndFilterExtra,omitempty"`
	PktRcvFilterExtra       int64   `protobuf:"varint,71,opt,name=pktRcvFilterExtra,proto3" json:"pktRcvFilterExtra,omitempty"`
	PktRcvFilterSupply      int64   `protobuf:"varint,72,opt,name=pktRcvFilterSupply,proto3" json:"pktRcvFilterSupply,omitempty"`
	PktRcvFilterLoss        int64   `protobuf:"varint,73,opt,name=pktRcvFilterLoss,proto3" json:"pktRcvFilterLoss,omitempty"`
	PktReorderTolerance     int64   `protobuf:"varint,74,opt,name=pktReorderTolerance,proto3" json:"pktReorderTolerance,omitempty"`
	PktSentUniqueTotal      int64   `protobuf:"varint,75,opt,name=pktSentUniqueTotal,proto3" json:"pktSentUniqueTotal,omitempty"`
	PktRecvUniqueTotal      int64   `protobuf:"varint,76,opt,name=pktRecvUniqueTotal,proto3" json:"pktRecvUniqueTotal,omitempty"`
	ByteSentUniqueTotal     uint64  `protobuf:"varint,77,opt,name=byteSentUniqueTotal,proto3" json:"byteSentUniqueTotal,omitempty"`
	ByteRecvUniqueTotal     uint64  `protobuf:"varint,78,opt,name=byteRecvUniqueTotal,proto3" json:"byteRecvUniqueTotal,omitempty"`
	PktSentUnique           int64   `protobuf:"varint,79,opt,name=pktSentUnique,proto3" json:"pktSentUnique,omitempty"`
	PktRecvUnique           int64   `protobuf:"varint,80,opt,name=pktRecvUnique,proto3" json:"pktRecvUnique,omitempty"`
	ByteSentUnique          uint64  `protobuf:"varint,81,opt,name=byteSentUnique,proto3" json:"byteSentUnique,omitempty"`
	ByteRecvUnique          uint64  `protobuf:"varint,82,opt,name=byteRecvUnique,proto3" json:"byteRecvUnique,omitempty"`
}

func (x *GetOutputSRTStatsReply) Reset() {
	*x = GetOutputSRTStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutputSRTStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutputSRTStatsReply) ProtoMessage() {}

func (x *GetOutputSRTStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutputSRTStatsReply.ProtoReflect.Descriptor instead.
func (*GetOutputSRTStatsReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{20}
}

func (x *GetOutputSRTStatsReply) GetMsTimeStamp() int64 {
	if x != nil {
		return x.MsTimeStamp
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSentTotal() int64 {
	if x != nil {
		return x.PktSentTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecvTotal() int64 {
	if x != nil {
		return x.PktRecvTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSndLossTotal() int64 {
	if x != nil {
		return x.PktSndLossTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvLossTotal() int64 {
	if x != nil {
		return x.PktRcvLossTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRetransTotal() int64 {
	if x != nil {
		return x.PktRetransTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSentACKTotal() int64 {
	if x != nil {
		return x.PktSentACKTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecvACKTotal() int64 {
	if x != nil {
		return x.PktRecvACKTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSentNAKTotal() int64 {
	if x != nil {
		return x.PktSentNAKTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecvNAKTotal() int64 {
	if x != nil {
		return x.PktRecvNAKTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetUsSndDurationTotal() int64 {
	if x != nil {
		return x.UsSndDurationTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSndDropTotal() int64 {
	if x != nil {
		return x.PktSndDropTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvDropTotal() int64 {
	if x != nil {
		return x.PktRcvDropTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvUndecryptTotal() int64 {
	if x != nil {
		return x.PktRcvUndecryptTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteSentTotal() uint64 {
	if x != nil {
		return x.ByteSentTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRecvTotal() uint64 {
	if x != nil {
		return x.ByteRecvTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRcvLossTotal() uint64 {
	if x != nil {
		return x.ByteRcvLossTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRetransTotal() uint64 {
	if x != nil {
		return x.ByteRetransTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteSndDropTotal() uint64 {
	if x != nil {
		return x.ByteSndDropTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRcvDropTotal() uint64 {
	if x != nil {
		return x.ByteRcvDropTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRcvUndecryptTotal() uint64 {
	if x != nil {
		return x.ByteRcvUndecryptTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSent() int64 {
	if x != nil {
		return x.PktSent
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecv() int64 {
	if x != nil {
		return x.PktRecv
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSndLoss() int64 {
	if x != nil {
		return x.PktSndLoss
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvLoss() int64 {
	if x != nil {
		return x.PktRcvLoss
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRetrans() int64 {
	if x != nil {
		return x.PktRetrans
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvRetrans() int64 {
	if x != nil {
		return x.PktRcvRetrans
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSentACK() int64 {
	if x != nil {
		return x.PktSentACK
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecvACK() int64 {
	if x != nil {
		return x.PktRecvACK
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSentNAK() int64 {
	if x != nil {
		return x.PktSentNAK
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecvNAK() int64 {
	if x != nil {
		return x.PktRecvNAK
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMbpsSendRate() float64 {
	if x != nil {
		return x.MbpsSendRate
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMbpsRecvRate() float64 {
	if x != nil {
		return x.MbpsRecvRate
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetUsSndDuration() int64 {
	if x != nil {
		return x.UsSndDuration
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktReorderDistance() int64 {
	if x != nil {
		return x.PktReorderDistance
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvAvgBelatedTime() float64 {
	if x != nil {
		return x.PktRcvAvgBelatedTime
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvBelated() int64 {
	if x != nil {
		return x.PktRcvBelated
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSndDrop() int64 {
	if x != nil {
		return x.PktSndDrop
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvDrop() int64 {
	if x != nil {
		return x.PktRcvDrop
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvUndecrypt() int64 {
	if x != nil {
		return x.PktRcvUndecrypt
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteSent() uint64 {
	if x != nil {
		return x.ByteSent
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRecv() uint64 {
	if x != nil {
		return x.ByteRecv
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRcvLoss() uint64 {
	if x != nil {
		return x.ByteRcvLoss
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRetrans() uint64 {
	if x != nil {
		return x.ByteRetrans
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteSndDrop() uint64 {
	if x != nil {
		return x.ByteSndDrop
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRcvDrop() uint64 {
	if x != nil {
		return x.ByteRcvDrop
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRcvUndecrypt() uint64 {
	if x != nil {
		return x.ByteRcvUndecrypt
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetUsPktSndPeriod() float64 {
	if x != nil {
		return x.UsPktSndPeriod
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktFlowWindow() int64 {
	if x != nil {
		return x.PktFlowWindow
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktCongestionWindow() int64 {
	if x != nil {
		return x.PktCongestionWindow
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktFlightSize() int64 {
	if x != nil {
		return x.PktFlightSize
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMsRTT() float64 {
	if x != nil {
		return x.MsRTT
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMbpsBandwidth() float64 {
	if x != nil {
		return x.MbpsBandwidth
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteAvailSndBuf() int64 {
	if x != nil {
		return x.ByteAvailSndBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteAvailRcvBuf() int64 {
	if x != nil {
		return x.ByteAvailRcvBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMbpsMaxBW() float64 {
	if x != nil {
		return x.MbpsMaxBW
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteMSS() int64 {
	if x != nil {
		return x.ByteMSS
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSndBuf() int64 {
	if x != nil {
		return x.PktSndBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteSndBuf() int64 {
	if x != nil {
		return x.ByteSndBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMsSndBuf() int64 {
	if x != nil {
		return x.MsSndBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMsSndTsbPdDelay() int64 {
	if x != nil {
		return x.MsSndTsbPdDelay
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvBuf() int64 {
	if x != nil {
		return x.PktRcvBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRcvBuf() int64 {
	if x != nil {
		return x.ByteRcvBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMsRcvBuf() int64 {
	if x != nil {
		return x.MsRcvBuf
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetMsRcvTsbPdDelay() int64 {
	if x != nil {
		return x.MsRcvTsbPdDelay
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSndFilterExtraTotal() int64 {
	if x != nil {
		return x.PktSndFilterExtraTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvFilterExtraTotal() int64 {
	if x != nil {
		return x.PktRcvFilterExtraTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvFilterSupplyTotal() int64 {
	if x != nil {
		return x.PktRcvFilterSupplyTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvFilterLossTotal() int64 {
	if x != nil {
		return x.PktRcvFilterLossTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSndFilterExtra() int64 {
	if x != nil {
		return x.PktSndFilterExtra
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvFilterExtra() int64 {
	if x != nil {
		return x.PktRcvFilterExtra
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvFilterSupply() int64 {
	if x != nil {
		return x.PktRcvFilterSupply
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRcvFilterLoss() int64 {
	if x != nil {
		return x.PktRcvFilterLoss
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktReorderTolerance() int64 {
	if x != nil {
		return x.PktReorderTolerance
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSentUniqueTotal() int64 {
	if x != nil {
		return x.PktSentUniqueTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecvUniqueTotal() int64 {
	if x != nil {
		return x.PktRecvUniqueTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteSentUniqueTotal() uint64 {
	if x != nil {
		return x.ByteSentUniqueTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRecvUniqueTotal() uint64 {
	if x != nil {
		return x.ByteRecvUniqueTotal
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktSentUnique() int64 {
	if x != nil {
		return x.PktSentUnique
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetPktRecvUnique() int64 {
	if x != nil {
		return x.PktRecvUnique
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteSentUnique() uint64 {
	if x != nil {
		return x.ByteSentUnique
	}
	return 0
}

func (x *GetOutputSRTStatsReply) GetByteRecvUnique() uint64 {
	if x != nil {
		return x.ByteRecvUnique
	}
	return 0
}

type GetFlagIntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag FlagInt `protobuf:"varint,1,opt,name=flag,proto3,enum=ffstream_grpc.FlagInt" json:"flag,omitempty"`
}

func (x *GetFlagIntRequest) Reset() {
	*x = GetFlagIntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlagIntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlagIntRequest) ProtoMessage() {}

func (x *GetFlagIntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlagIntRequest.ProtoReflect.Descriptor instead.
func (*GetFlagIntRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{21}
}

func (x *GetFlagIntRequest) GetFlag() FlagInt {
	if x != nil {
		return x.Flag
	}
	return FlagInt_undefined
}

type GetFlagIntReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetFlagIntReply) Reset() {
	*x = GetFlagIntReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlagIntReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlagIntReply) ProtoMessage() {}

func (x *GetFlagIntReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlagIntReply.ProtoReflect.Descriptor instead.
func (*GetFlagIntReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{22}
}

func (x *GetFlagIntReply) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SetFlagIntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag  FlagInt `protobuf:"varint,1,opt,name=flag,proto3,enum=ffstream_grpc.FlagInt" json:"flag,omitempty"`
	Value int64   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetFlagIntRequest) Reset() {
	*x = SetFlagIntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFlagIntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlagIntRequest) ProtoMessage() {}

func (x *SetFlagIntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlagIntRequest.ProtoReflect.Descriptor instead.
func (*SetFlagIntRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{23}
}

func (x *SetFlagIntRequest) GetFlag() FlagInt {
	if x != nil {
		return x.Flag
	}
	return FlagInt_undefined
}

func (x *SetFlagIntRequest) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SetFlagIntReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFlagIntReply) Reset() {
	*x = SetFlagIntReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFlagIntReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlagIntReply) ProtoMessage() {}

func (x *SetFlagIntReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlagIntReply.ProtoReflect.Descriptor instead.
func (*SetFlagIntReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{24}
}

type WaitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitRequest) Reset() {
	*x = WaitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitRequest) ProtoMessage() {}

func (x *WaitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitRequest.ProtoReflect.Descriptor instead.
func (*WaitRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{25}
}

type WaitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitReply) Reset() {
	*x = WaitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitReply) ProtoMessage() {}

func (x *WaitReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitReply.ProtoReflect.Descriptor instead.
func (*WaitReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{26}
}

type EndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndRequest) Reset() {
	*x = EndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRequest) ProtoMessage() {}

func (x *EndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRequest.ProtoReflect.Descriptor instead.
func (*EndRequest) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{27}
}

type EndReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndReply) Reset() {
	*x = EndReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffstream_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndReply) ProtoMessage() {}

func (x *EndReply) ProtoReflect() protoreflect.Message {
	mi := &file_ffstream_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndReply.ProtoReflect.Descriptor instead.
func (*EndReply) Descriptor() ([]byte, []int) {
	return file_ffstream_proto_rawDescGZIP(), []int{28}
}

var File_ffstream_proto protoreflect.FileDescriptor

var file_ffstream_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x22,
	0x4b, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x16, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x20,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe0, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x62, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x72, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1f, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e,
	0x42, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x73, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x30, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4f,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x66, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc2, 0x05, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57,
	0x72, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x6e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x72, 0x6f,
	0x74, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x57,
	0x72, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x6e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x52, 0x54, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xba, 0x19, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53,
	0x52, 0x54, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63,
	0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64,
	0x4c, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x63,
	0x76, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b,
	0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41,
	0x43, 0x4b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70,
	0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x43, 0x4b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x41, 0x43, 0x4b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76,
	0x41, 0x43, 0x4b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x4e, 0x41, 0x4b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4e, 0x41, 0x4b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4e, 0x41, 0x4b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x6b, 0x74,
	0x52, 0x65, 0x63, 0x76, 0x4e, 0x41, 0x4b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12,
	0x75, 0x73, 0x53, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x73, 0x53, 0x6e, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x44, 0x72, 0x6f,
	0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x55, 0x6e, 0x64, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x55, 0x6e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x63, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x4c, 0x6f, 0x73, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65,
	0x52, 0x63, 0x76, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65,
	0x53, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x53, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x55, 0x6e, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x55, 0x6e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b,
	0x74, 0x53, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b,
	0x74, 0x52, 0x63, 0x76, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b,
	0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6b, 0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6b,
	0x74, 0x52, 0x63, 0x76, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x43, 0x4b, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x43, 0x4b,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x41, 0x43, 0x4b, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x41, 0x43, 0x4b,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4e, 0x41, 0x4b, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4e, 0x41, 0x4b,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4e, 0x41, 0x4b, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4e, 0x41, 0x4b,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x62, 0x70, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x62, 0x70, 0x73, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x62, 0x70, 0x73, 0x52, 0x65, 0x63, 0x76,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x62, 0x70, 0x73,
	0x52, 0x65, 0x63, 0x76, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x53, 0x6e,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x75, 0x73, 0x53, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x6b, 0x74, 0x52,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x41, 0x76, 0x67, 0x42, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6b,
	0x74, 0x52, 0x63, 0x76, 0x41, 0x76, 0x67, 0x42, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x42, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6b, 0x74, 0x52, 0x63,
	0x76, 0x42, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b, 0x74, 0x53,
	0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6b,
	0x74, 0x53, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6b, 0x74, 0x52,
	0x63, 0x76, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6b,
	0x74, 0x52, 0x63, 0x76, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6b, 0x74, 0x52,
	0x63, 0x76, 0x55, 0x6e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x55, 0x6e, 0x64, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x63, 0x76, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x63, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x52, 0x63, 0x76, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x53, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x53, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x44, 0x72, 0x6f, 0x70, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x44, 0x72,
	0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x55, 0x6e, 0x64,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x79,
	0x74, 0x65, 0x52, 0x63, 0x76, 0x55, 0x6e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x75, 0x73, 0x50, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x75, 0x73, 0x50, 0x6b, 0x74, 0x53, 0x6e, 0x64,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70,
	0x6b, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x6b, 0x74, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x6b, 0x74, 0x43, 0x6f,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6b, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x52, 0x54, 0x54, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x52, 0x54, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x62,
	0x70, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x6d, 0x62, 0x70, 0x73, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x6e, 0x64,
	0x42, 0x75, 0x66, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x79,
	0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x63,
	0x76, 0x42, 0x75, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x42,
	0x57, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x62, 0x70, 0x73, 0x4d, 0x61, 0x78,
	0x42, 0x57, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x74, 0x65, 0x4d, 0x53, 0x53, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x4d, 0x53, 0x53, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73,
	0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x73,
	0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x73, 0x53, 0x6e, 0x64, 0x54,
	0x73, 0x62, 0x50, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6d, 0x73, 0x53, 0x6e, 0x64, 0x54, 0x73, 0x62, 0x50, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x73, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x18, 0x40, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x73, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x73,
	0x52, 0x63, 0x76, 0x54, 0x73, 0x62, 0x50, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x73, 0x52, 0x63, 0x76, 0x54, 0x73, 0x62, 0x50, 0x64, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16,
	0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x6b,
	0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70,
	0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x70, 0x6b, 0x74, 0x53, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x6b,
	0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6b, 0x74, 0x52, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x73, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6b, 0x74, 0x52,
	0x63, 0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x6b, 0x74, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x6b, 0x74, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x6b, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x6b, 0x74, 0x52,
	0x65, 0x63, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30,
	0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x62, 0x79, 0x74,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x30, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x63, 0x76, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x62,
	0x79, 0x74, 0x65, 0x52, 0x65, 0x63, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6b, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x52,
	0x65, 0x63, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x6b, 0x74, 0x52, 0x65, 0x63, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x52, 0x65, 0x63, 0x76, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x3f,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22,
	0x27, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x66,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x49, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x11, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x0b, 0x0a, 0x09, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0c,
	0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0a, 0x0a, 0x08,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0xc3, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46,
	0x61, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x10, 0x07, 0x2a, 0x25,
	0x0a, 0x07, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x10, 0x01, 0x32, 0xd8, 0x08, 0x0a, 0x08, 0x46, 0x46, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x5f, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66,
	0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1e, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x2e, 0x66,
	0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x22,
	0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x66, 0x66, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x66,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53,
	0x52, 0x54, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x52, 0x54, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x52, 0x54, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x49,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x66, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x53,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x66, 0x66, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x66,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x08, 0x57, 0x61, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x66, 0x66, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x66, 0x66, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x12, 0x5a, 0x10, 0x67, 0x6f, 0x2f, 0x66, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ffstream_proto_rawDescOnce sync.Once
	file_ffstream_proto_rawDescData = file_ffstream_proto_rawDesc
)

func file_ffstream_proto_rawDescGZIP() []byte {
	file_ffstream_proto_rawDescOnce.Do(func() {
		file_ffstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_ffstream_proto_rawDescData)
	})
	return file_ffstream_proto_rawDescData
}

var file_ffstream_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ffstream_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_ffstream_proto_goTypes = []interface{}{
	(LoggingLevel)(0),                // 0: ffstream_grpc.LoggingLevel
	(FlagInt)(0),                     // 1: ffstream_grpc.FlagInt
	(*SetLoggingLevelRequest)(nil),   // 2: ffstream_grpc.SetLoggingLevelRequest
	(*SetLoggingLevelReply)(nil),     // 3: ffstream_grpc.SetLoggingLevelReply
	(*CustomOption)(nil),             // 4: ffstream_grpc.customOption
	(*AddInputRequest)(nil),          // 5: ffstream_grpc.AddInputRequest
	(*AddInputReply)(nil),            // 6: ffstream_grpc.AddInputReply
	(*AddOutputRequest)(nil),         // 7: ffstream_grpc.AddOutputRequest
	(*AddOutputReply)(nil),           // 8: ffstream_grpc.AddOutputReply
	(*RemoveOutputRequest)(nil),      // 9: ffstream_grpc.RemoveOutputRequest
	(*RemoveOutputReply)(nil),        // 10: ffstream_grpc.RemoveOutputReply
	(*CodecConfig)(nil),              // 11: ffstream_grpc.CodecConfig
	(*EncoderConfig)(nil),            // 12: ffstream_grpc.EncoderConfig
	(*GetEncoderConfigRequest)(nil),  // 13: ffstream_grpc.GetEncoderConfigRequest
	(*GetEncoderConfigReply)(nil),    // 14: ffstream_grpc.GetEncoderConfigReply
	(*SetEncoderConfigRequest)(nil),  // 15: ffstream_grpc.SetEncoderConfigRequest
	(*SetEncoderConfigReply)(nil),    // 16: ffstream_grpc.SetEncoderConfigReply
	(*StartRequest)(nil),             // 17: ffstream_grpc.StartRequest
	(*StartReply)(nil),               // 18: ffstream_grpc.StartReply
	(*GetEncoderStatsRequest)(nil),   // 19: ffstream_grpc.GetEncoderStatsRequest
	(*GetEncoderStatsReply)(nil),     // 20: ffstream_grpc.GetEncoderStatsReply
	(*GetOutputSRTStatsRequest)(nil), // 21: ffstream_grpc.GetOutputSRTStatsRequest
	(*GetOutputSRTStatsReply)(nil),   // 22: ffstream_grpc.GetOutputSRTStatsReply
	(*GetFlagIntRequest)(nil),        // 23: ffstream_grpc.GetFlagIntRequest
	(*GetFlagIntReply)(nil),          // 24: ffstream_grpc.GetFlagIntReply
	(*SetFlagIntRequest)(nil),        // 25: ffstream_grpc.SetFlagIntRequest
	(*SetFlagIntReply)(nil),          // 26: ffstream_grpc.SetFlagIntReply
	(*WaitRequest)(nil),              // 27: ffstream_grpc.WaitRequest
	(*WaitReply)(nil),                // 28: ffstream_grpc.WaitReply
	(*EndRequest)(nil),               // 29: ffstream_grpc.EndRequest
	(*EndReply)(nil),                 // 30: ffstream_grpc.EndReply
}
var file_ffstream_proto_depIdxs = []int32{
	0,  // 0: ffstream_grpc.SetLoggingLevelRequest.level:type_name -> ffstream_grpc.LoggingLevel
	4,  // 1: ffstream_grpc.AddInputRequest.customOptions:type_name -> ffstream_grpc.customOption
	4,  // 2: ffstream_grpc.AddOutputRequest.customOptions:type_name -> ffstream_grpc.customOption
	4,  // 3: ffstream_grpc.CodecConfig.customOptions:type_name -> ffstream_grpc.customOption
	11, // 4: ffstream_grpc.EncoderConfig.audio:type_name -> ffstream_grpc.CodecConfig
	11, // 5: ffstream_grpc.EncoderConfig.video:type_name -> ffstream_grpc.CodecConfig
	12, // 6: ffstream_grpc.GetEncoderConfigReply.config:type_name -> ffstream_grpc.EncoderConfig
	12, // 7: ffstream_grpc.SetEncoderConfigRequest.config:type_name -> ffstream_grpc.EncoderConfig
	1,  // 8: ffstream_grpc.GetFlagIntRequest.flag:type_name -> ffstream_grpc.FlagInt
	1,  // 9: ffstream_grpc.SetFlagIntRequest.flag:type_name -> ffstream_grpc.FlagInt
	2,  // 10: ffstream_grpc.FFStream.SetLoggingLevel:input_type -> ffstream_grpc.SetLoggingLevelRequest
	5,  // 11: ffstream_grpc.FFStream.AddInput:input_type -> ffstream_grpc.AddInputRequest
	7,  // 12: ffstream_grpc.FFStream.AddOutput:input_type -> ffstream_grpc.AddOutputRequest
	9,  // 13: ffstream_grpc.FFStream.RemoveOutput:input_type -> ffstream_grpc.RemoveOutputRequest
	13, // 14: ffstream_grpc.FFStream.GetEncoderConfig:input_type -> ffstream_grpc.GetEncoderConfigRequest
	15, // 15: ffstream_grpc.FFStream.SetEncoderConfig:input_type -> ffstream_grpc.SetEncoderConfigRequest
	17, // 16: ffstream_grpc.FFStream.Start:input_type -> ffstream_grpc.StartRequest
	19, // 17: ffstream_grpc.FFStream.GetEncoderStats:input_type -> ffstream_grpc.GetEncoderStatsRequest
	21, // 18: ffstream_grpc.FFStream.GetOutputSRTStats:input_type -> ffstream_grpc.GetOutputSRTStatsRequest
	23, // 19: ffstream_grpc.FFStream.GetFlagInt:input_type -> ffstream_grpc.GetFlagIntRequest
	25, // 20: ffstream_grpc.FFStream.SetFlagInt:input_type -> ffstream_grpc.SetFlagIntRequest
	27, // 21: ffstream_grpc.FFStream.WaitChan:input_type -> ffstream_grpc.WaitRequest
	29, // 22: ffstream_grpc.FFStream.End:input_type -> ffstream_grpc.EndRequest
	3,  // 23: ffstream_grpc.FFStream.SetLoggingLevel:output_type -> ffstream_grpc.SetLoggingLevelReply
	6,  // 24: ffstream_grpc.FFStream.AddInput:output_type -> ffstream_grpc.AddInputReply
	8,  // 25: ffstream_grpc.FFStream.AddOutput:output_type -> ffstream_grpc.AddOutputReply
	10, // 26: ffstream_grpc.FFStream.RemoveOutput:output_type -> ffstream_grpc.RemoveOutputReply
	14, // 27: ffstream_grpc.FFStream.GetEncoderConfig:output_type -> ffstream_grpc.GetEncoderConfigReply
	16, // 28: ffstream_grpc.FFStream.SetEncoderConfig:output_type -> ffstream_grpc.SetEncoderConfigReply
	18, // 29: ffstream_grpc.FFStream.Start:output_type -> ffstream_grpc.StartReply
	20, // 30: ffstream_grpc.FFStream.GetEncoderStats:output_type -> ffstream_grpc.GetEncoderStatsReply
	22, // 31: ffstream_grpc.FFStream.GetOutputSRTStats:output_type -> ffstream_grpc.GetOutputSRTStatsReply
	24, // 32: ffstream_grpc.FFStream.GetFlagInt:output_type -> ffstream_grpc.GetFlagIntReply
	26, // 33: ffstream_grpc.FFStream.SetFlagInt:output_type -> ffstream_grpc.SetFlagIntReply
	28, // 34: ffstream_grpc.FFStream.WaitChan:output_type -> ffstream_grpc.WaitReply
	30, // 35: ffstream_grpc.FFStream.End:output_type -> ffstream_grpc.EndReply
	23, // [23:36] is the sub-list for method output_type
	10, // [10:23] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ffstream_proto_init() }
func file_ffstream_proto_init() {
	if File_ffstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ffstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLoggingLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLoggingLevelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInputReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOutputReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOutputReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncoderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEncoderConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEncoderConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEncoderConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEncoderConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEncoderStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEncoderStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutputSRTStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutputSRTStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlagIntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlagIntReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFlagIntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFlagIntReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffstream_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ffstream_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ffstream_proto_goTypes,
		DependencyIndexes: file_ffstream_proto_depIdxs,
		EnumInfos:         file_ffstream_proto_enumTypes,
		MessageInfos:      file_ffstream_proto_msgTypes,
	}.Build()
	File_ffstream_proto = out.File
	file_ffstream_proto_rawDesc = nil
	file_ffstream_proto_goTypes = nil
	file_ffstream_proto_depIdxs = nil
}
