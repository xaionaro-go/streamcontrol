package goconv

import (
	"github.com/xaionaro-go/libsrt"
	"github.com/xaionaro-go/streamctl/pkg/ffstreamserver/grpc/go/ffstream_grpc"
)

func OutputSRTStatsToGRPC(
	stats *libsrt.Tracebstats,
) *ffstream_grpc.GetOutputSRTStatsReply {
	return &ffstream_grpc.GetOutputSRTStatsReply{
		MsTimeStamp:             stats.MsTimeStamp,
		PktSentTotal:            stats.PktSentTotal,
		PktRecvTotal:            stats.PktRecvTotal,
		PktSndLossTotal:         int64(stats.PktSndLossTotal),
		PktRcvLossTotal:         int64(stats.PktRcvLossTotal),
		PktRetransTotal:         int64(stats.PktRetransTotal),
		PktSentACKTotal:         int64(stats.PktSentACKTotal),
		PktRecvACKTotal:         int64(stats.PktRecvACKTotal),
		PktSentNAKTotal:         int64(stats.PktSentNAKTotal),
		PktRecvNAKTotal:         int64(stats.PktRecvNAKTotal),
		UsSndDurationTotal:      stats.UsSndDurationTotal,
		PktSndDropTotal:         int64(stats.PktSndDropTotal),
		PktRcvDropTotal:         int64(stats.PktRcvDropTotal),
		PktRcvUndecryptTotal:    int64(stats.PktRcvUndecryptTotal),
		ByteSentTotal:           stats.ByteSentTotal,
		ByteRecvTotal:           stats.ByteRecvTotal,
		ByteRcvLossTotal:        stats.ByteRcvLossTotal,
		ByteRetransTotal:        stats.ByteRetransTotal,
		ByteSndDropTotal:        stats.ByteSndDropTotal,
		ByteRcvDropTotal:        stats.ByteRcvDropTotal,
		ByteRcvUndecryptTotal:   stats.ByteRcvUndecryptTotal,
		PktSent:                 stats.PktSent,
		PktRecv:                 stats.PktRecv,
		PktSndLoss:              int64(stats.PktSndLoss),
		PktRcvLoss:              int64(stats.PktRcvLoss),
		PktRetrans:              int64(stats.PktRetrans),
		PktRcvRetrans:           int64(stats.PktRcvRetrans),
		PktSentACK:              int64(stats.PktSentACK),
		PktRecvACK:              int64(stats.PktRecvACK),
		PktSentNAK:              int64(stats.PktSentNAK),
		PktRecvNAK:              int64(stats.PktRecvNAK),
		MbpsSendRate:            stats.MbpsSendRate,
		MbpsRecvRate:            stats.MbpsRecvRate,
		UsSndDuration:           stats.UsSndDuration,
		PktReorderDistance:      int64(stats.PktReorderDistance),
		PktRcvAvgBelatedTime:    stats.PktRcvAvgBelatedTime,
		PktRcvBelated:           stats.PktRcvBelated,
		PktSndDrop:              int64(stats.PktSndDrop),
		PktRcvDrop:              int64(stats.PktRcvDrop),
		PktRcvUndecrypt:         int64(stats.PktRcvUndecrypt),
		ByteSent:                stats.ByteSent,
		ByteRecv:                stats.ByteRecv,
		ByteRcvLoss:             stats.ByteRcvLoss,
		ByteRetrans:             stats.ByteRetrans,
		ByteSndDrop:             stats.ByteSndDrop,
		ByteRcvDrop:             stats.ByteRcvDrop,
		ByteRcvUndecrypt:        stats.ByteRcvUndecrypt,
		UsPktSndPeriod:          stats.UsPktSndPeriod,
		PktFlowWindow:           int64(stats.PktFlowWindow),
		PktCongestionWindow:     int64(stats.PktCongestionWindow),
		PktFlightSize:           int64(stats.PktFlightSize),
		MsRTT:                   stats.MsRTT,
		MbpsBandwidth:           stats.MbpsBandwidth,
		ByteAvailSndBuf:         int64(stats.ByteAvailSndBuf),
		ByteAvailRcvBuf:         int64(stats.ByteAvailRcvBuf),
		MbpsMaxBW:               stats.MbpsMaxBW,
		ByteMSS:                 int64(stats.ByteMSS),
		PktSndBuf:               int64(stats.PktSndBuf),
		ByteSndBuf:              int64(stats.ByteSndBuf),
		MsSndBuf:                int64(stats.MsSndBuf),
		MsSndTsbPdDelay:         int64(stats.MsSndTsbPdDelay),
		PktRcvBuf:               int64(stats.PktRcvBuf),
		ByteRcvBuf:              int64(stats.ByteRcvBuf),
		MsRcvBuf:                int64(stats.MsRcvBuf),
		MsRcvTsbPdDelay:         int64(stats.MsRcvTsbPdDelay),
		PktSndFilterExtraTotal:  int64(stats.PktSndFilterExtraTotal),
		PktRcvFilterExtraTotal:  int64(stats.PktRcvFilterExtraTotal),
		PktRcvFilterSupplyTotal: int64(stats.PktRcvFilterSupplyTotal),
		PktRcvFilterLossTotal:   int64(stats.PktRcvFilterLossTotal),
		PktSndFilterExtra:       int64(stats.PktSndFilterExtra),
		PktRcvFilterExtra:       int64(stats.PktRcvFilterExtra),
		PktRcvFilterSupply:      int64(stats.PktRcvFilterSupply),
		PktRcvFilterLoss:        int64(stats.PktRcvFilterLoss),
		PktReorderTolerance:     int64(stats.PktReorderTolerance),
		PktSentUniqueTotal:      stats.PktSentUniqueTotal,
		PktRecvUniqueTotal:      stats.PktRecvUniqueTotal,
		ByteSentUniqueTotal:     stats.ByteSentUniqueTotal,
		ByteRecvUniqueTotal:     stats.ByteRecvUniqueTotal,
		PktSentUnique:           stats.PktSentUnique,
		PktRecvUnique:           stats.PktRecvUnique,
		ByteSentUnique:          stats.ByteSentUnique,
		ByteRecvUnique:          stats.ByteRecvUnique,
	}
}

func OutputSRTStatsFromGRPC(
	stats *ffstream_grpc.GetOutputSRTStatsReply,
) *libsrt.Tracebstats {
	return &libsrt.Tracebstats{
		MsTimeStamp:             stats.MsTimeStamp,
		PktSentTotal:            stats.PktSentTotal,
		PktRecvTotal:            stats.PktRecvTotal,
		PktSndLossTotal:         int(stats.PktSndLossTotal),
		PktRcvLossTotal:         int(stats.PktRcvLossTotal),
		PktRetransTotal:         int(stats.PktRetransTotal),
		PktSentACKTotal:         int(stats.PktSentACKTotal),
		PktRecvACKTotal:         int(stats.PktRecvACKTotal),
		PktSentNAKTotal:         int(stats.PktSentNAKTotal),
		PktRecvNAKTotal:         int(stats.PktRecvNAKTotal),
		UsSndDurationTotal:      stats.UsSndDurationTotal,
		PktSndDropTotal:         int(stats.PktSndDropTotal),
		PktRcvDropTotal:         int(stats.PktRcvDropTotal),
		PktRcvUndecryptTotal:    int(stats.PktRcvUndecryptTotal),
		ByteSentTotal:           stats.ByteSentTotal,
		ByteRecvTotal:           stats.ByteRecvTotal,
		ByteRcvLossTotal:        stats.ByteRcvLossTotal,
		ByteRetransTotal:        stats.ByteRetransTotal,
		ByteSndDropTotal:        stats.ByteSndDropTotal,
		ByteRcvDropTotal:        stats.ByteRcvDropTotal,
		ByteRcvUndecryptTotal:   stats.ByteRcvUndecryptTotal,
		PktSent:                 stats.PktSent,
		PktRecv:                 stats.PktRecv,
		PktSndLoss:              int(stats.PktSndLoss),
		PktRcvLoss:              int(stats.PktRcvLoss),
		PktRetrans:              int(stats.PktRetrans),
		PktRcvRetrans:           int(stats.PktRcvRetrans),
		PktSentACK:              int(stats.PktSentACK),
		PktRecvACK:              int(stats.PktRecvACK),
		PktSentNAK:              int(stats.PktSentNAK),
		PktRecvNAK:              int(stats.PktRecvNAK),
		MbpsSendRate:            stats.MbpsSendRate,
		MbpsRecvRate:            stats.MbpsRecvRate,
		UsSndDuration:           stats.UsSndDuration,
		PktReorderDistance:      int(stats.PktReorderDistance),
		PktRcvAvgBelatedTime:    stats.PktRcvAvgBelatedTime,
		PktRcvBelated:           stats.PktRcvBelated,
		PktSndDrop:              int(stats.PktSndDrop),
		PktRcvDrop:              int(stats.PktRcvDrop),
		PktRcvUndecrypt:         int(stats.PktRcvUndecrypt),
		ByteSent:                stats.ByteSent,
		ByteRecv:                stats.ByteRecv,
		ByteRcvLoss:             stats.ByteRcvLoss,
		ByteRetrans:             stats.ByteRetrans,
		ByteSndDrop:             stats.ByteSndDrop,
		ByteRcvDrop:             stats.ByteRcvDrop,
		ByteRcvUndecrypt:        stats.ByteRcvUndecrypt,
		UsPktSndPeriod:          stats.UsPktSndPeriod,
		PktFlowWindow:           int(stats.PktFlowWindow),
		PktCongestionWindow:     int(stats.PktCongestionWindow),
		PktFlightSize:           int(stats.PktFlightSize),
		MsRTT:                   stats.MsRTT,
		MbpsBandwidth:           stats.MbpsBandwidth,
		ByteAvailSndBuf:         int(stats.ByteAvailSndBuf),
		ByteAvailRcvBuf:         int(stats.ByteAvailRcvBuf),
		MbpsMaxBW:               stats.MbpsMaxBW,
		ByteMSS:                 int(stats.ByteMSS),
		PktSndBuf:               int(stats.PktSndBuf),
		ByteSndBuf:              int(stats.ByteSndBuf),
		MsSndBuf:                int(stats.MsSndBuf),
		MsSndTsbPdDelay:         int(stats.MsSndTsbPdDelay),
		PktRcvBuf:               int(stats.PktRcvBuf),
		ByteRcvBuf:              int(stats.ByteRcvBuf),
		MsRcvBuf:                int(stats.MsRcvBuf),
		MsRcvTsbPdDelay:         int(stats.MsRcvTsbPdDelay),
		PktSndFilterExtraTotal:  int(stats.PktSndFilterExtraTotal),
		PktRcvFilterExtraTotal:  int(stats.PktRcvFilterExtraTotal),
		PktRcvFilterSupplyTotal: int(stats.PktRcvFilterSupplyTotal),
		PktRcvFilterLossTotal:   int(stats.PktRcvFilterLossTotal),
		PktSndFilterExtra:       int(stats.PktSndFilterExtra),
		PktRcvFilterExtra:       int(stats.PktRcvFilterExtra),
		PktRcvFilterSupply:      int(stats.PktRcvFilterSupply),
		PktRcvFilterLoss:        int(stats.PktRcvFilterLoss),
		PktReorderTolerance:     int(stats.PktReorderTolerance),
		PktSentUniqueTotal:      stats.PktSentUniqueTotal,
		PktRecvUniqueTotal:      stats.PktRecvUniqueTotal,
		ByteSentUniqueTotal:     stats.ByteSentUniqueTotal,
		ByteRecvUniqueTotal:     stats.ByteRecvUniqueTotal,
		PktSentUnique:           stats.PktSentUnique,
		PktRecvUnique:           stats.PktRecvUnique,
		ByteSentUnique:          stats.ByteSentUnique,
		ByteRecvUnique:          stats.ByteRecvUnique,
	}
}
